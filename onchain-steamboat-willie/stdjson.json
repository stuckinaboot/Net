{"language":"Solidity","sources":{"src/warhol/PopWillies.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nimport { NFTEventsAndErrors } from \"./NFTEventsAndErrors.sol\";\nimport { Utils } from \"./Utils.sol\";\nimport { LibString } from \"../utils/LibString.sol\";\nimport { OnchainSteamboatWillie } from \"../OnchainSteamboatWillie.sol\";\nimport { ERC721SeaDrop } from \"seadrop/src/ERC721SeaDrop.sol\";\nimport { SharedConstants } from \"./SharedConstants.sol\";\nimport { Renderer } from \"./Renderer.sol\";\n\n/// @title Pop Willies\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\ncontract PopWillies is ERC721SeaDrop, NFTEventsAndErrors, SharedConstants {\n    using LibString for uint16;\n    using LibString for uint8;\n\n    mapping(uint256 => uint16[4]) public tokenIdTo4Willies;\n    mapping(uint256 => uint16[9]) public tokenIdTo9Willies;\n\n    OnchainSteamboatWillie internal onchainSteamboatWillie;\n    Renderer public renderer;\n\n    address internal mintSeaDropRecipient;\n\n    address payable internal constant _VAULT_ADDRESS = payable(address(0x39Ab90066cec746A032D67e4fe3378f16294CF6b));\n    uint256 internal constant ONCHAIN_STEAMBOAT_WILLIES_MINT_PRICE = 0.005 ether;\n    uint16 internal constant MAX_SUPPLY = 300;\n    uint8 internal constant MAX_MINTS_PER_TRANSACTION = 3;\n\n    constructor(\n        address onchainSteamboatWillieAddr,\n        address rendererAddr,\n        address[] memory allowedSeaDrop\n    )\n        ERC721SeaDrop(\"Pop Willies\", \"POPWIL\", allowedSeaDrop)\n    {\n        onchainSteamboatWillie = OnchainSteamboatWillie(onchainSteamboatWillieAddr);\n        renderer = Renderer(rendererAddr);\n    }\n\n    /// @notice Set renderer.\n    /// @param newRenderer new renderer\n    function setRenderer(address newRenderer) external onlyOwner {\n        renderer = Renderer(newRenderer);\n    }\n\n    /// @notice Mint tokens to msg.sender.\n    /// @param amount amount\n    /// @param large mint 3x3 tokens if true, 2x2 tokens if false\n    function mint(uint8 amount, bool large) public payable {\n        mintTo(msg.sender, amount, large);\n    }\n\n    /// @notice Mint tokens.\n    /// @param to address tokens should be minted to\n    /// @param amount amount\n    /// @param large mint 3x3 tokens if true, 2x2 tokens if false\n    function mintTo(address to, uint8 amount, bool large) public payable {\n        // Checks\n        unchecked {\n            if (amount > MAX_MINTS_PER_TRANSACTION) {\n                // Check max mints per transaction not exceeded\n                revert MaxMintsPerTransactionExceeded();\n            }\n\n            uint8 totalAmountOfWilliesToMint = amount * (large ? LARGE_TOKEN_COUNT : SMALL_TOKEN_COUNT);\n\n            if (totalAmountOfWilliesToMint * ONCHAIN_STEAMBOAT_WILLIES_MINT_PRICE != msg.value) {\n                // Check payment by sender is correct\n                revert IncorrectPayment();\n            }\n\n            if (MAX_SUPPLY + 1 < _nextTokenId() + amount) {\n                // Check max supply not exceeded\n                revert MaxSupplyReached();\n            }\n\n            uint16 mintedWillieTokenId = uint16(OnchainSteamboatWillie(onchainSteamboatWillie).totalSupply() + 1);\n\n            uint256 nextTokenIdToBeMinted = _nextTokenId();\n            uint8 mintedSoFar = 0;\n            if (large) {\n                for (uint256 i = nextTokenIdToBeMinted; i < nextTokenIdToBeMinted + amount;) {\n                    uint16 mintedWilliesOffset = mintedWillieTokenId + mintedSoFar * LARGE_TOKEN_COUNT;\n                    tokenIdTo9Willies[i] = [\n                        mintedWilliesOffset,\n                        mintedWilliesOffset + 1,\n                        mintedWilliesOffset + 2,\n                        mintedWilliesOffset + 3,\n                        mintedWilliesOffset + 4,\n                        mintedWilliesOffset + 5,\n                        mintedWilliesOffset + 6,\n                        mintedWilliesOffset + 7,\n                        mintedWilliesOffset + 8\n                    ];\n                    ++i;\n                    ++mintedSoFar;\n                }\n            } else {\n                for (uint256 i = nextTokenIdToBeMinted; i < nextTokenIdToBeMinted + amount;) {\n                    uint16 mintedWilliesOffset = mintedWillieTokenId + mintedSoFar * SMALL_TOKEN_COUNT;\n                    tokenIdTo4Willies[i] =\n                        [mintedWilliesOffset, mintedWilliesOffset + 1, mintedWilliesOffset + 2, mintedWilliesOffset + 3];\n                    ++i;\n                    ++mintedSoFar;\n                }\n            }\n\n            _mint(to, amount);\n\n            // Interactions\n\n            // Mint tokens from Onchain Steamboat Willie\n            OnchainSteamboatWillie(onchainSteamboatWillie).mintPublic{ value: msg.value }(totalAmountOfWilliesToMint);\n\n            // Transfer Onchain Steamboat Willies to `to`\n            for (uint8 i; i < totalAmountOfWilliesToMint;) {\n                OnchainSteamboatWillie(onchainSteamboatWillie).transferFrom(address(this), to, mintedWillieTokenId + i);\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Paint 2x2 token with onchain steamboat willies.\n    /// @param tokenId token to paint\n    /// @param willie1 onchain steamboat willie 1\n    /// @param willie2 onchain steamboat willie 2\n    /// @param willie3 onchain steamboat willie 3\n    /// @param willie4 onchain steamboat willie 4\n    function paintWillies4(uint256 tokenId, uint16 willie1, uint16 willie2, uint16 willie3, uint16 willie4) external {\n        // Check user owns this token\n        if (msg.sender != ownerOf(tokenId)) {\n            revert MsgSenderNotOwnerOfPopWillie();\n        }\n\n        // Check token is correct size\n        if (tokenIdTo4Willies[tokenId][0] == 0) {\n            revert PaintIncorrectPopWillieSize();\n        }\n\n        // Check and paint token\n        checkAndPaintWillies4(tokenId, 1, willie1, willie2, willie3, willie4);\n\n        // Emit metadata update event\n        emit MetadataUpdate(tokenId);\n    }\n\n    /// @notice Paint 3x3 token with onchain steamboat willies.\n    /// @param tokenId token to paint\n    /// @param willie1 onchain steamboat willie 1\n    /// @param willie2 onchain steamboat willie 2\n    /// @param willie3 onchain steamboat willie 3\n    /// @param willie4 onchain steamboat willie 4\n    /// @param willie5 onchain steamboat willie 5\n    /// @param willie6 onchain steamboat willie 6\n    /// @param willie7 onchain steamboat willie 7\n    /// @param willie8 onchain steamboat willie 8\n    /// @param willie9 onchain steamboat willie 9\n    function paintWillies9(\n        uint256 tokenId,\n        uint16 willie1,\n        uint16 willie2,\n        uint16 willie3,\n        uint16 willie4,\n        uint16 willie5,\n        uint16 willie6,\n        uint16 willie7,\n        uint16 willie8,\n        uint16 willie9\n    )\n        external\n    {\n        // Check user owns this token\n        if (msg.sender != ownerOf(tokenId)) {\n            revert MsgSenderNotOwnerOfPopWillie();\n        }\n\n        // Check token is correct size\n        if (tokenIdTo9Willies[tokenId][0] == 0) {\n            revert PaintIncorrectPopWillieSize();\n        }\n\n        // Check and paint token\n        checkAndPaintWillies9(\n            tokenId, 1, willie1, willie2, willie3, willie4, willie5, willie6, willie7, willie8, willie9\n        );\n\n        // Emit metadata update event\n        emit MetadataUpdate(tokenId);\n    }\n\n    function checkAndPaintWillies4(\n        uint256 startTokenId,\n        uint8 amount,\n        uint16 willie1,\n        uint16 willie2,\n        uint16 willie3,\n        uint16 willie4\n    )\n        internal\n    {\n        // Check Willies all unique\n        uint8[1112] memory willieIds;\n        ++willieIds[willie1];\n        if (\n            // If any value for particular willie id is greater than 0, that implies the willie id was already seen\n            willieIds[willie2]++ > 0 || willieIds[willie3]++ > 0 || willieIds[willie4]++ > 0\n        ) {\n            revert OnchainSteamboatWillieCanOnlyBeIncludedOncePerToken();\n        }\n\n        // Check Willies ownership\n        if (\n            onchainSteamboatWillie.ownerOf(willie1) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie2) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie3) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie4) != msg.sender\n        ) {\n            revert MsgSenderNotOwnerOfOnchainSteamboatWillie();\n        }\n\n        // Set Willies\n        unchecked {\n            uint256 nextTokenIdToBeMinted = startTokenId;\n            for (uint256 i = nextTokenIdToBeMinted; i < nextTokenIdToBeMinted + amount;) {\n                tokenIdTo4Willies[i] = [willie1, willie2, willie3, willie4];\n                ++i;\n            }\n        }\n    }\n\n    function checkAndPaintWillies9(\n        uint256 startTokenId,\n        uint8 amount,\n        uint16 willie1,\n        uint16 willie2,\n        uint16 willie3,\n        uint16 willie4,\n        uint16 willie5,\n        uint16 willie6,\n        uint16 willie7,\n        uint16 willie8,\n        uint16 willie9\n    )\n        internal\n    {\n        // Check Willies all unique\n        uint8[1112] memory willieIds;\n        ++willieIds[willie1];\n        if (\n            // If any value for particular willie id is greater than 0, that implies the willie id was already seen\n            willieIds[willie2]++ > 0 || willieIds[willie3]++ > 0 || willieIds[willie4]++ > 0 || willieIds[willie5]++ > 0\n                || willieIds[willie6]++ > 0 || willieIds[willie7]++ > 0 || willieIds[willie8]++ > 0\n                || willieIds[willie9]++ > 0\n        ) {\n            revert OnchainSteamboatWillieCanOnlyBeIncludedOncePerToken();\n        }\n\n        // Check Willies ownership\n        if (\n            onchainSteamboatWillie.ownerOf(willie1) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie2) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie3) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie4) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie5) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie6) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie7) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie8) != msg.sender\n                || onchainSteamboatWillie.ownerOf(willie9) != msg.sender\n        ) {\n            revert MsgSenderNotOwnerOfOnchainSteamboatWillie();\n        }\n\n        // Effects\n\n        // Set Willies\n        unchecked {\n            uint256 nextTokenIdToBeMinted = startTokenId;\n            for (uint256 i = nextTokenIdToBeMinted; i < nextTokenIdToBeMinted + amount;) {\n                tokenIdTo9Willies[i] = [willie1, willie2, willie3, willie4, willie5, willie6, willie7, willie8, willie9];\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Mint 2x2 token with onchain steamboat willies.\n    /// @param willie1 onchain steamboat willie 1\n    /// @param willie2 onchain steamboat willie 2\n    /// @param willie3 onchain steamboat willie 3\n    /// @param willie4 onchain steamboat willie 4\n    /// @param amount amount to mint\n    function mintPopWillies4(uint16 willie1, uint16 willie2, uint16 willie3, uint16 willie4, uint8 amount) public {\n        // Checks\n        unchecked {\n            if (amount > MAX_MINTS_PER_TRANSACTION) {\n                // Check max mints per transaction not exceeded\n                revert MaxMintsPerTransactionExceeded();\n            }\n\n            if (MAX_SUPPLY + 1 < _nextTokenId() + amount) {\n                // Check max supply not exceeded\n                revert MaxSupplyReached();\n            }\n        }\n\n        checkAndPaintWillies4(_nextTokenId(), amount, willie1, willie2, willie3, willie4);\n\n        // Effects\n        _mint(msg.sender, amount);\n    }\n\n    /// @notice Mint 3x3 token with onchain steamboat willies.\n    /// @param willie1 onchain steamboat willie 1\n    /// @param willie2 onchain steamboat willie 2\n    /// @param willie3 onchain steamboat willie 3\n    /// @param willie4 onchain steamboat willie 4\n    /// @param willie5 onchain steamboat willie 5\n    /// @param willie6 onchain steamboat willie 6\n    /// @param willie7 onchain steamboat willie 7\n    /// @param willie8 onchain steamboat willie 8\n    /// @param willie9 onchain steamboat willie 9\n    /// @param amount amount to mint\n    function mintPopWillies9(\n        uint16 willie1,\n        uint16 willie2,\n        uint16 willie3,\n        uint16 willie4,\n        uint16 willie5,\n        uint16 willie6,\n        uint16 willie7,\n        uint16 willie8,\n        uint16 willie9,\n        uint8 amount\n    )\n        public\n    {\n        // Checks\n        unchecked {\n            if (amount > MAX_MINTS_PER_TRANSACTION) {\n                // Check max mints per transaction not exceeded\n                revert MaxMintsPerTransactionExceeded();\n            }\n\n            if (MAX_SUPPLY + 1 < _nextTokenId() + amount) {\n                // Check max supply not exceeded\n                revert MaxSupplyReached();\n            }\n        }\n\n        checkAndPaintWillies9(\n            _nextTokenId(), amount, willie1, willie2, willie3, willie4, willie5, willie6, willie7, willie8, willie9\n        );\n\n        // Mint\n        _mint(msg.sender, amount);\n    }\n\n    function _startTokenId() internal pure override returns (uint256) {\n        return 1;\n    }\n\n    /// @notice Get art svg and animation script for token.\n    /// @param tokenId token id\n    /// @return (art, animation script)\n    function art(uint256 tokenId) public view returns (string memory, string memory) {\n        if (!_exists(tokenId)) {\n            revert URIQueryForNonexistentToken();\n        }\n\n        bool large = tokenIdTo9Willies[tokenId][0] != 0;\n        uint8 totalWillies = large ? LARGE_TOKEN_COUNT : SMALL_TOKEN_COUNT;\n\n        uint16[] memory willies = new uint16[](totalWillies);\n        unchecked {\n            if (large) {\n                for (uint8 i; i < LARGE_TOKEN_COUNT;) {\n                    willies[i] = tokenIdTo9Willies[tokenId][i];\n                    ++i;\n                }\n            } else {\n                for (uint8 i; i < SMALL_TOKEN_COUNT;) {\n                    willies[i] = tokenIdTo4Willies[tokenId][i];\n                    ++i;\n                }\n            }\n        }\n\n        return (renderer.art(willies), renderer.artScript(willies));\n    }\n\n    /// @notice Withdraw all ETH from the contract.\n    function withdraw() external {\n        (bool success,) = _VAULT_ADDRESS.call{ value: address(this).balance }(\"\");\n        require(success);\n    }\n\n    /// @notice Get token uri for token.\n    /// @param tokenId token id\n    /// @return tokenURI\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) {\n            revert URIQueryForNonexistentToken();\n        }\n\n        uint8 totalWillies = tokenIdTo9Willies[tokenId][0] != 0 ? LARGE_TOKEN_COUNT : SMALL_TOKEN_COUNT;\n        string memory traits;\n        // Add composed willies traits\n        unchecked {\n            for (uint8 i; i < totalWillies;) {\n                traits = string.concat(\n                    traits,\n                    Utils.willieTrait(\n                        totalWillies == LARGE_TOKEN_COUNT\n                            ? tokenIdTo9Willies[tokenId][i]\n                            : tokenIdTo4Willies[tokenId][i],\n                        i + 1,\n                        true\n                    )\n                );\n                ++i;\n            }\n        }\n        // Add size trait\n        traits = string.concat(traits, Utils.getTrait(\"Size\", totalWillies == LARGE_TOKEN_COUNT ? \"3x3\" : \"2x2\", false));\n\n        (string memory artSvg, string memory artScript) = art(tokenId);\n        return Utils.formatTokenURI(\n            tokenId,\n            string.concat(\"data:image/svg+xml;base64,\", Utils.encodeBase64(bytes(artSvg))),\n            string.concat(\n                \"data:text/html;base64,\",\n                Utils.encodeBase64(\n                    bytes(\n                        string.concat(\n                            '<html style=\"overflow:hidden\"><body style=\"margin:0\">', artSvg, artScript, \"</body></html>\"\n                        )\n                    )\n                )\n            ),\n            string.concat(\"[\", traits, \"]\")\n        );\n    }\n\n    /**\n     * @notice Mint tokens, restricted to the SeaDrop contract.\n     *\n     * @dev    NOTE: If a token registers itself with multiple SeaDrop\n     *         contracts, the implementation of this function should guard\n     *         against reentrancy. If the implementing token uses\n     *         _safeMint(), or a feeRecipient with a malicious receive() hook\n     *         is specified, the token or fee recipients may be able to execute\n     *         another mint in the same transaction via a separate SeaDrop\n     *         contract.\n     *         This is dangerous if an implementing token does not correctly\n     *         update the minterNumMinted and currentTotalSupply values before\n     *         transferring minted tokens, as SeaDrop references these values\n     *         to enforce token limits on a per-wallet and per-stage basis.\n     *\n     *         ERC721A tracks these values automatically, but this note and\n     *         nonReentrant modifier are left here to encourage best-practices\n     *         when referencing this contract.\n     *\n     * @param minter   The address to mint to.\n     * @param quantity The number of tokens to mint.\n     */\n    function mintSeaDrop(address minter, uint256 quantity) external virtual override nonReentrant {\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(msg.sender);\n\n        // Set seadrop recipient to minter\n        mintSeaDropRecipient = minter;\n    }\n\n    fallback() external payable {\n        uint8 amount = uint8(msg.value / (SMALL_TOKEN_COUNT * ONCHAIN_STEAMBOAT_WILLIES_MINT_PRICE));\n        this.mintTo{ value: amount * SMALL_TOKEN_COUNT * ONCHAIN_STEAMBOAT_WILLIES_MINT_PRICE }(\n            mintSeaDropRecipient, amount, false\n        );\n        mintSeaDropRecipient = address(0);\n    }\n}\n"},"src/warhol/NFTEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\ninterface NFTEventsAndErrors {\n    event MetadataUpdate(uint256 tokenId);\n\n    error MaxSupplyReached();\n    error MaxMintsPerTransactionExceeded();\n    error IncorrectPayment();\n    error MsgSenderNotOwnerOfOnchainSteamboatWillie();\n    error OnchainSteamboatWillieCanOnlyBeIncludedOncePerToken();\n    error MsgSenderNotOwnerOfPopWillie();\n    error PaintIncorrectPopWillieSize();\n}\n"},"src/warhol/Utils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nimport { LibString } from \"../utils/LibString.sol\";\n\nlibrary Utils {\n    using LibString for uint256;\n    using LibString for uint16;\n    using LibString for uint8;\n\n    string internal constant _BASE64_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function willieTrait(\n        uint16 willieTokenId,\n        uint8 willieNumber,\n        bool trailingComma\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        return getTrait(\n            string.concat(\"Composed Willie \", willieNumber.toString()), willieTokenId.toString(), trailingComma\n        );\n    }\n\n    function getDecimalStringFrom1e18ScaledUint256(uint256 scaled) internal pure returns (string memory decimal) {\n        uint256 partBeforeDecimal = scaled / 1e18;\n        uint256 partAfterDecimal = (scaled % 1e18);\n        if (partAfterDecimal > 1e17) {\n            // Throw out last 12 digits, as that much precision is unnecessary and bloats the string size\n            partAfterDecimal = partAfterDecimal / 1e12;\n        }\n        return string.concat(partBeforeDecimal.toString(), \".\", partAfterDecimal.toString());\n    }\n\n    function formatTokenURI(\n        uint256 _tokenId,\n        string memory _imageURI,\n        string memory _animationURI,\n        string memory _properties\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\n            \"data:application/json;base64,\",\n            encodeBase64(\n                bytes(\n                    string.concat(\n                        '{\"name\":\"Pop Willie #',\n                        _tokenId.toString(),\n                        // TODO look at description\n                        '\",\"description\":\"Pop Willies are onchain collages blending the iconic classic Steamboat Willie with blockchain-enabled digital art composability. Each Pop Willie is composed from Onchain Steamboat Willie NFTs.\",\"attributes\":',\n                        _properties,\n                        ',\"image\":\"',\n                        _imageURI,\n                        '\",\"animation_url\":\"',\n                        _animationURI,\n                        '\"}'\n                    )\n                )\n            )\n        );\n    }\n\n    function getTrait(\n        string memory traitType,\n        string memory value,\n        bool includeTrailingComma\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat('{\"trait_type\":\"', traitType, '\",\"value\":\"', value, '\"}', includeTrailingComma ? \",\" : \"\");\n    }\n\n    // Encode some bytes in base64\n    // https://gist.github.com/mbvissers/8ba9ac1eca9ed0ef6973bd49b3c999ba\n    function encodeBase64(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = _BASE64_TABLE;\n\n        unchecked {\n            // multiply by 4/3 rounded up\n            uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n            // add some extra buffer at the end required for the writing\n            string memory result = new string(encodedLen + 32);\n\n            assembly {\n                // set the actual output length\n                mstore(result, encodedLen)\n\n                // prepare the lookup table\n                let tablePtr := add(table, 1)\n\n                // input ptr\n                let dataPtr := data\n                let endPtr := add(dataPtr, mload(data))\n\n                // result ptr, jump over length\n                let resultPtr := add(result, 32)\n\n                // run over the input, 3 bytes at a time\n                for { } lt(dataPtr, endPtr) { } {\n                    dataPtr := add(dataPtr, 3)\n\n                    // read 3 bytes\n                    let input := mload(dataPtr)\n\n                    // write 4 characters\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                }\n\n                // padding with '='\n                switch mod(mload(data), 3)\n                case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n                case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n            }\n\n            return result;\n        }\n    }\n}\n"},"src/utils/LibString.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for converting numbers into strings and other string operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\nlibrary LibString {\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                        CUSTOM ERRORS                       */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev The `length` of the output is too small to contain all the hex digits.\n  error HexLengthInsufficient();\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                         CONSTANTS                          */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev The constant returned when the `search` is not found in the string.\n  uint256 internal constant NOT_FOUND = type(uint256).max;\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                     DECIMAL OPERATIONS                     */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev Returns the base 10 decimal representation of `value`.\n  function toString(uint256 value) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n      // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n      // We will need 1 word for the trailing zeros padding, 1 word for the length,\n      // and 3 words for a maximum of 78 digits.\n      str := add(mload(0x40), 0x80)\n      // Update the free memory pointer to allocate.\n      mstore(0x40, add(str, 0x20))\n      // Zeroize the slot after the string.\n      mstore(str, 0)\n\n      // Cache the end of the memory to calculate the length later.\n      let end := str\n\n      let w := not(0) // Tsk.\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n        let temp := value\n      } 1 {\n\n      } {\n        str := add(str, w) // `sub(str, 1)`.\n        // Write the character to the pointer.\n        // The ASCII index of the '0' character is 48.\n        mstore8(str, add(48, mod(temp, 10)))\n        // Keep dividing `temp` until zero.\n        temp := div(temp, 10)\n        if iszero(temp) {\n          break\n        }\n      }\n\n      let length := sub(end, str)\n      // Move the pointer 32 bytes leftwards to make room for the length.\n      str := sub(str, 0x20)\n      // Store the length.\n      mstore(str, length)\n    }\n  }\n\n  /// @dev Returns the base 10 decimal representation of `value`.\n  function toString(int256 value) internal pure returns (string memory str) {\n    if (value >= 0) {\n      return toString(uint256(value));\n    }\n    unchecked {\n      str = toString(uint256(-value));\n    }\n    /// @solidity memory-safe-assembly\n    assembly {\n      // We still have some spare memory space on the left,\n      // as we have allocated 3 words (96 bytes) for up to 78 digits.\n      let length := mload(str) // Load the string length.\n      mstore(str, 0x2d) // Store the '-' character.\n      str := sub(str, 1) // Move back the string pointer by a byte.\n      mstore(str, add(length, 1)) // Update the string length.\n    }\n  }\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                   HEXADECIMAL OPERATIONS                   */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev Returns the hexadecimal representation of `value`,\n  /// left-padded to an input length of `length` bytes.\n  /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\n  /// giving a total length of `length * 2 + 2` bytes.\n  /// Reverts if `length` is too small for the output to contain all the digits.\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\n    str = toHexStringNoPrefix(value, length);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let strLength := add(mload(str), 2) // Compute the length.\n      mstore(str, 0x3078) // Write the \"0x\" prefix.\n      str := sub(str, 2) // Move the pointer.\n      mstore(str, strLength) // Write the length.\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`,\n  /// left-padded to an input length of `length` bytes.\n  /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\n  /// giving a total length of `length * 2` bytes.\n  /// Reverts if `length` is too small for the output to contain all the digits.\n  function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\n      // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\n      // We add 0x20 to the total and round down to a multiple of 0x20.\n      // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\n      str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\n      // Allocate the memory.\n      mstore(0x40, add(str, 0x20))\n      // Zeroize the slot after the string.\n      mstore(str, 0)\n\n      // Cache the end to calculate the length later.\n      let end := str\n      // Store \"0123456789abcdef\" in scratch space.\n      mstore(0x0f, 0x30313233343536373839616263646566)\n\n      let start := sub(str, add(length, length))\n      let w := not(1) // Tsk.\n      let temp := value\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n\n      } 1 {\n\n      } {\n        str := add(str, w) // `sub(str, 2)`.\n        mstore8(add(str, 1), mload(and(temp, 15)))\n        mstore8(str, mload(and(shr(4, temp), 15)))\n        temp := shr(8, temp)\n        if iszero(xor(str, start)) {\n          break\n        }\n      }\n\n      if temp {\n        // Store the function selector of `HexLengthInsufficient()`.\n        mstore(0x00, 0x2194895a)\n        // Revert with (offset, size).\n        revert(0x1c, 0x04)\n      }\n\n      // Compute the string's length.\n      let strLength := sub(end, str)\n      // Move the pointer and write the length.\n      str := sub(str, 0x20)\n      mstore(str, strLength)\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\n  /// As address are 20 bytes long, the output will left-padded to have\n  /// a length of `20 * 2 + 2` bytes.\n  function toHexString(uint256 value) internal pure returns (string memory str) {\n    str = toHexStringNoPrefix(value);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let strLength := add(mload(str), 2) // Compute the length.\n      mstore(str, 0x3078) // Write the \"0x\" prefix.\n      str := sub(str, 2) // Move the pointer.\n      mstore(str, strLength) // Write the length.\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is encoded using 2 hexadecimal digits per byte.\n  /// As address are 20 bytes long, the output will left-padded to have\n  /// a length of `20 * 2` bytes.\n  function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n      // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\n      // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\n      str := add(mload(0x40), 0x80)\n      // Allocate the memory.\n      mstore(0x40, add(str, 0x20))\n      // Zeroize the slot after the string.\n      mstore(str, 0)\n\n      // Cache the end to calculate the length later.\n      let end := str\n      // Store \"0123456789abcdef\" in scratch space.\n      mstore(0x0f, 0x30313233343536373839616263646566)\n\n      let w := not(1) // Tsk.\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n        let temp := value\n      } 1 {\n\n      } {\n        str := add(str, w) // `sub(str, 2)`.\n        mstore8(add(str, 1), mload(and(temp, 15)))\n        mstore8(str, mload(and(shr(4, temp), 15)))\n        temp := shr(8, temp)\n        if iszero(temp) {\n          break\n        }\n      }\n\n      // Compute the string's length.\n      let strLength := sub(end, str)\n      // Move the pointer and write the length.\n      str := sub(str, 0x20)\n      mstore(str, strLength)\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is prefixed with \"0x\", encoded using 2 hexadecimal digits per byte,\n  /// and the alphabets are capitalized conditionally according to\n  /// https://eips.ethereum.org/EIPS/eip-55\n  function toHexStringChecksumed(address value) internal pure returns (string memory str) {\n    str = toHexString(value);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\n      let o := add(str, 0x22)\n      let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\n      let t := shl(240, 136) // `0b10001000 << 240`\n      for {\n        let i := 0\n      } 1 {\n\n      } {\n        mstore(add(i, i), mul(t, byte(i, hashed)))\n        i := add(i, 1)\n        if eq(i, 20) {\n          break\n        }\n      }\n      mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\n      o := add(o, 0x20)\n      mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\n  function toHexString(address value) internal pure returns (string memory str) {\n    str = toHexStringNoPrefix(value);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let strLength := add(mload(str), 2) // Compute the length.\n      mstore(str, 0x3078) // Write the \"0x\" prefix.\n      str := sub(str, 2) // Move the pointer.\n      mstore(str, strLength) // Write the length.\n    }\n  }\n\n  /// @dev Returns the hexadecimal representation of `value`.\n  /// The output is encoded using 2 hexadecimal digits per byte.\n  function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      str := mload(0x40)\n\n      // Allocate the memory.\n      // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n      // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\n      // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\n      mstore(0x40, add(str, 0x80))\n\n      // Store \"0123456789abcdef\" in scratch space.\n      mstore(0x0f, 0x30313233343536373839616263646566)\n\n      str := add(str, 2)\n      mstore(str, 40)\n\n      let o := add(str, 0x20)\n      mstore(add(o, 40), 0)\n\n      value := shl(96, value)\n\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n        let i := 0\n      } 1 {\n\n      } {\n        let p := add(o, add(i, i))\n        let temp := byte(i, value)\n        mstore8(add(p, 1), mload(and(temp, 15)))\n        mstore8(p, mload(shr(4, temp)))\n        i := add(i, 1)\n        if eq(i, 20) {\n          break\n        }\n      }\n    }\n  }\n\n  /// @dev Returns the hex encoded string from the raw bytes.\n  /// The output is encoded using 2 hexadecimal digits per byte.\n  function toHexString(bytes memory raw) internal pure returns (string memory str) {\n    str = toHexStringNoPrefix(raw);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let strLength := add(mload(str), 2) // Compute the length.\n      mstore(str, 0x3078) // Write the \"0x\" prefix.\n      str := sub(str, 2) // Move the pointer.\n      mstore(str, strLength) // Write the length.\n    }\n  }\n\n  /// @dev Returns the hex encoded string from the raw bytes.\n  /// The output is encoded using 2 hexadecimal digits per byte.\n  function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let length := mload(raw)\n      str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\n      mstore(str, add(length, length)) // Store the length of the output.\n\n      // Store \"0123456789abcdef\" in scratch space.\n      mstore(0x0f, 0x30313233343536373839616263646566)\n\n      let o := add(str, 0x20)\n      let end := add(raw, length)\n\n      for {\n\n      } iszero(eq(raw, end)) {\n\n      } {\n        raw := add(raw, 1)\n        mstore8(add(o, 1), mload(and(mload(raw), 15)))\n        mstore8(o, mload(and(shr(4, mload(raw)), 15)))\n        o := add(o, 2)\n      }\n      mstore(o, 0) // Zeroize the slot after the string.\n      mstore(0x40, and(add(o, 31), not(31))) // Allocate the memory.\n    }\n  }\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                   RUNE STRING OPERATIONS                   */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev Returns the number of UTF characters in the string.\n  function runeCount(string memory s) internal pure returns (uint256 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      if mload(s) {\n        mstore(0x00, div(not(0), 255))\n        mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\n        let o := add(s, 0x20)\n        let end := add(o, mload(s))\n        for {\n          result := 1\n        } 1 {\n          result := add(result, 1)\n        } {\n          o := add(o, byte(0, mload(shr(250, mload(o)))))\n          if iszero(lt(o, end)) {\n            break\n          }\n        }\n      }\n    }\n  }\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                   BYTE STRING OPERATIONS                   */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  // For performance and bytecode compactness, all indices of the following operations\n  // are byte (ASCII) offsets, not UTF character offsets.\n\n  /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\n  function replace(\n    string memory subject,\n    string memory search,\n    string memory replacement\n  ) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let subjectLength := mload(subject)\n      let searchLength := mload(search)\n      let replacementLength := mload(replacement)\n\n      subject := add(subject, 0x20)\n      search := add(search, 0x20)\n      replacement := add(replacement, 0x20)\n      result := add(mload(0x40), 0x20)\n\n      let subjectEnd := add(subject, subjectLength)\n      if iszero(gt(searchLength, subjectLength)) {\n        let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\n        let h := 0\n        if iszero(lt(searchLength, 32)) {\n          h := keccak256(search, searchLength)\n        }\n        let m := shl(3, sub(32, and(searchLength, 31)))\n        let s := mload(search)\n        for {\n\n        } 1 {\n\n        } {\n          let t := mload(subject)\n          // Whether the first `searchLength % 32` bytes of\n          // `subject` and `search` matches.\n          if iszero(shr(m, xor(t, s))) {\n            if h {\n              if iszero(eq(keccak256(subject, searchLength), h)) {\n                mstore(result, t)\n                result := add(result, 1)\n                subject := add(subject, 1)\n                if iszero(lt(subject, subjectSearchEnd)) {\n                  break\n                }\n                continue\n              }\n            }\n            // Copy the `replacement` one word at a time.\n            for {\n              let o := 0\n            } 1 {\n\n            } {\n              mstore(add(result, o), mload(add(replacement, o)))\n              o := add(o, 0x20)\n              if iszero(lt(o, replacementLength)) {\n                break\n              }\n            }\n            result := add(result, replacementLength)\n            subject := add(subject, searchLength)\n            if searchLength {\n              if iszero(lt(subject, subjectSearchEnd)) {\n                break\n              }\n              continue\n            }\n          }\n          mstore(result, t)\n          result := add(result, 1)\n          subject := add(subject, 1)\n          if iszero(lt(subject, subjectSearchEnd)) {\n            break\n          }\n        }\n      }\n\n      let resultRemainder := result\n      result := add(mload(0x40), 0x20)\n      let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\n      // Copy the rest of the string one word at a time.\n      for {\n\n      } lt(subject, subjectEnd) {\n\n      } {\n        mstore(resultRemainder, mload(subject))\n        resultRemainder := add(resultRemainder, 0x20)\n        subject := add(subject, 0x20)\n      }\n      result := sub(result, 0x20)\n      // Zeroize the slot after the string.\n      let last := add(add(result, 0x20), k)\n      mstore(last, 0)\n      // Allocate memory for the length and the bytes,\n      // rounded up to a multiple of 32.\n      mstore(0x40, and(add(last, 31), not(31)))\n      // Store the length of the result.\n      mstore(result, k)\n    }\n  }\n\n  /// @dev Returns the byte index of the first location of `search` in `subject`,\n  /// searching from left to right, starting from `from`.\n  /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n  function indexOf(string memory subject, string memory search, uint256 from) internal pure returns (uint256 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      for {\n        let subjectLength := mload(subject)\n      } 1 {\n\n      } {\n        if iszero(mload(search)) {\n          if iszero(gt(from, subjectLength)) {\n            result := from\n            break\n          }\n          result := subjectLength\n          break\n        }\n        let searchLength := mload(search)\n        let subjectStart := add(subject, 0x20)\n\n        result := not(0) // Initialize to `NOT_FOUND`.\n\n        subject := add(subjectStart, from)\n        let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\n\n        let m := shl(3, sub(32, and(searchLength, 31)))\n        let s := mload(add(search, 0x20))\n\n        if iszero(and(lt(subject, end), lt(from, subjectLength))) {\n          break\n        }\n\n        if iszero(lt(searchLength, 32)) {\n          for {\n            let h := keccak256(add(search, 0x20), searchLength)\n          } 1 {\n\n          } {\n            if iszero(shr(m, xor(mload(subject), s))) {\n              if eq(keccak256(subject, searchLength), h) {\n                result := sub(subject, subjectStart)\n                break\n              }\n            }\n            subject := add(subject, 1)\n            if iszero(lt(subject, end)) {\n              break\n            }\n          }\n          break\n        }\n        for {\n\n        } 1 {\n\n        } {\n          if iszero(shr(m, xor(mload(subject), s))) {\n            result := sub(subject, subjectStart)\n            break\n          }\n          subject := add(subject, 1)\n          if iszero(lt(subject, end)) {\n            break\n          }\n        }\n        break\n      }\n    }\n  }\n\n  /// @dev Returns the byte index of the first location of `search` in `subject`,\n  /// searching from left to right.\n  /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n  function indexOf(string memory subject, string memory search) internal pure returns (uint256 result) {\n    result = indexOf(subject, search, 0);\n  }\n\n  /// @dev Returns the byte index of the first location of `search` in `subject`,\n  /// searching from right to left, starting from `from`.\n  /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n  function lastIndexOf(\n    string memory subject,\n    string memory search,\n    uint256 from\n  ) internal pure returns (uint256 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      for {\n\n      } 1 {\n\n      } {\n        result := not(0) // Initialize to `NOT_FOUND`.\n        let searchLength := mload(search)\n        if gt(searchLength, mload(subject)) {\n          break\n        }\n        let w := result\n\n        let fromMax := sub(mload(subject), searchLength)\n        if iszero(gt(fromMax, from)) {\n          from := fromMax\n        }\n\n        let end := add(add(subject, 0x20), w)\n        subject := add(add(subject, 0x20), from)\n        if iszero(gt(subject, end)) {\n          break\n        }\n        // As this function is not too often used,\n        // we shall simply use keccak256 for smaller bytecode size.\n        for {\n          let h := keccak256(add(search, 0x20), searchLength)\n        } 1 {\n\n        } {\n          if eq(keccak256(subject, searchLength), h) {\n            result := sub(subject, add(end, 1))\n            break\n          }\n          subject := add(subject, w) // `sub(subject, 1)`.\n          if iszero(gt(subject, end)) {\n            break\n          }\n        }\n        break\n      }\n    }\n  }\n\n  /// @dev Returns the byte index of the first location of `search` in `subject`,\n  /// searching from right to left.\n  /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n  function lastIndexOf(string memory subject, string memory search) internal pure returns (uint256 result) {\n    result = lastIndexOf(subject, search, uint256(int256(-1)));\n  }\n\n  /// @dev Returns whether `subject` starts with `search`.\n  function startsWith(string memory subject, string memory search) internal pure returns (bool result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let searchLength := mload(search)\n      // Just using keccak256 directly is actually cheaper.\n      // forgefmt: disable-next-item\n      result := and(\n        iszero(gt(searchLength, mload(subject))),\n        eq(keccak256(add(subject, 0x20), searchLength), keccak256(add(search, 0x20), searchLength))\n      )\n    }\n  }\n\n  /// @dev Returns whether `subject` ends with `search`.\n  function endsWith(string memory subject, string memory search) internal pure returns (bool result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let searchLength := mload(search)\n      let subjectLength := mload(subject)\n      // Whether `search` is not longer than `subject`.\n      let withinRange := iszero(gt(searchLength, subjectLength))\n      // Just using keccak256 directly is actually cheaper.\n      // forgefmt: disable-next-item\n      result := and(\n        withinRange,\n        eq(\n          keccak256(\n            // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\n            add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\n            searchLength\n          ),\n          keccak256(add(search, 0x20), searchLength)\n        )\n      )\n    }\n  }\n\n  /// @dev Returns `subject` repeated `times`.\n  function repeat(string memory subject, uint256 times) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let subjectLength := mload(subject)\n      if iszero(or(iszero(times), iszero(subjectLength))) {\n        subject := add(subject, 0x20)\n        result := mload(0x40)\n        let output := add(result, 0x20)\n        for {\n\n        } 1 {\n\n        } {\n          // Copy the `subject` one word at a time.\n          for {\n            let o := 0\n          } 1 {\n\n          } {\n            mstore(add(output, o), mload(add(subject, o)))\n            o := add(o, 0x20)\n            if iszero(lt(o, subjectLength)) {\n              break\n            }\n          }\n          output := add(output, subjectLength)\n          times := sub(times, 1)\n          if iszero(times) {\n            break\n          }\n        }\n        // Zeroize the slot after the string.\n        mstore(output, 0)\n        // Store the length.\n        let resultLength := sub(output, add(result, 0x20))\n        mstore(result, resultLength)\n        // Allocate memory for the length and the bytes,\n        // rounded up to a multiple of 32.\n        mstore(0x40, add(result, and(add(resultLength, 63), not(31))))\n      }\n    }\n  }\n\n  /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n  /// `start` and `end` are byte offsets.\n  function slice(string memory subject, uint256 start, uint256 end) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let subjectLength := mload(subject)\n      if iszero(gt(subjectLength, end)) {\n        end := subjectLength\n      }\n      if iszero(gt(subjectLength, start)) {\n        start := subjectLength\n      }\n      if lt(start, end) {\n        result := mload(0x40)\n        let resultLength := sub(end, start)\n        mstore(result, resultLength)\n        subject := add(subject, start)\n        let w := not(31)\n        // Copy the `subject` one word at a time, backwards.\n        for {\n          let o := and(add(resultLength, 31), w)\n        } 1 {\n\n        } {\n          mstore(add(result, o), mload(add(subject, o)))\n          o := add(o, w) // `sub(o, 0x20)`.\n          if iszero(o) {\n            break\n          }\n        }\n        // Zeroize the slot after the string.\n        mstore(add(add(result, 0x20), resultLength), 0)\n        // Allocate memory for the length and the bytes,\n        // rounded up to a multiple of 32.\n        mstore(0x40, add(result, and(add(resultLength, 63), w)))\n      }\n    }\n  }\n\n  /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\n  /// `start` is a byte offset.\n  function slice(string memory subject, uint256 start) internal pure returns (string memory result) {\n    result = slice(subject, start, uint256(int256(-1)));\n  }\n\n  /// @dev Returns all the indices of `search` in `subject`.\n  /// The indices are byte offsets.\n  function indicesOf(string memory subject, string memory search) internal pure returns (uint256[] memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let subjectLength := mload(subject)\n      let searchLength := mload(search)\n\n      if iszero(gt(searchLength, subjectLength)) {\n        subject := add(subject, 0x20)\n        search := add(search, 0x20)\n        result := add(mload(0x40), 0x20)\n\n        let subjectStart := subject\n        let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\n        let h := 0\n        if iszero(lt(searchLength, 32)) {\n          h := keccak256(search, searchLength)\n        }\n        let m := shl(3, sub(32, and(searchLength, 31)))\n        let s := mload(search)\n        for {\n\n        } 1 {\n\n        } {\n          let t := mload(subject)\n          // Whether the first `searchLength % 32` bytes of\n          // `subject` and `search` matches.\n          if iszero(shr(m, xor(t, s))) {\n            if h {\n              if iszero(eq(keccak256(subject, searchLength), h)) {\n                subject := add(subject, 1)\n                if iszero(lt(subject, subjectSearchEnd)) {\n                  break\n                }\n                continue\n              }\n            }\n            // Append to `result`.\n            mstore(result, sub(subject, subjectStart))\n            result := add(result, 0x20)\n            // Advance `subject` by `searchLength`.\n            subject := add(subject, searchLength)\n            if searchLength {\n              if iszero(lt(subject, subjectSearchEnd)) {\n                break\n              }\n              continue\n            }\n          }\n          subject := add(subject, 1)\n          if iszero(lt(subject, subjectSearchEnd)) {\n            break\n          }\n        }\n        let resultEnd := result\n        // Assign `result` to the free memory pointer.\n        result := mload(0x40)\n        // Store the length of `result`.\n        mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\n        // Allocate memory for result.\n        // We allocate one more word, so this array can be recycled for {split}.\n        mstore(0x40, add(resultEnd, 0x20))\n      }\n    }\n  }\n\n  /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\n  function split(string memory subject, string memory delimiter) internal pure returns (string[] memory result) {\n    uint256[] memory indices = indicesOf(subject, delimiter);\n    /// @solidity memory-safe-assembly\n    assembly {\n      let w := not(31)\n      let indexPtr := add(indices, 0x20)\n      let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\n      mstore(add(indicesEnd, w), mload(subject))\n      mstore(indices, add(mload(indices), 1))\n      let prevIndex := 0\n      for {\n\n      } 1 {\n\n      } {\n        let index := mload(indexPtr)\n        mstore(indexPtr, 0x60)\n        if iszero(eq(index, prevIndex)) {\n          let element := mload(0x40)\n          let elementLength := sub(index, prevIndex)\n          mstore(element, elementLength)\n          // Copy the `subject` one word at a time, backwards.\n          for {\n            let o := and(add(elementLength, 31), w)\n          } 1 {\n\n          } {\n            mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\n            o := add(o, w) // `sub(o, 0x20)`.\n            if iszero(o) {\n              break\n            }\n          }\n          // Zeroize the slot after the string.\n          mstore(add(add(element, 0x20), elementLength), 0)\n          // Allocate memory for the length and the bytes,\n          // rounded up to a multiple of 32.\n          mstore(0x40, add(element, and(add(elementLength, 63), w)))\n          // Store the `element` into the array.\n          mstore(indexPtr, element)\n        }\n        prevIndex := add(index, mload(delimiter))\n        indexPtr := add(indexPtr, 0x20)\n        if iszero(lt(indexPtr, indicesEnd)) {\n          break\n        }\n      }\n      result := indices\n      if iszero(mload(delimiter)) {\n        result := add(indices, 0x20)\n        mstore(result, sub(mload(indices), 2))\n      }\n    }\n  }\n\n  /// @dev Returns a concatenated string of `a` and `b`.\n  /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\n  function concat(string memory a, string memory b) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let w := not(31)\n      result := mload(0x40)\n      let aLength := mload(a)\n      // Copy `a` one word at a time, backwards.\n      for {\n        let o := and(add(mload(a), 32), w)\n      } 1 {\n\n      } {\n        mstore(add(result, o), mload(add(a, o)))\n        o := add(o, w) // `sub(o, 0x20)`.\n        if iszero(o) {\n          break\n        }\n      }\n      let bLength := mload(b)\n      let output := add(result, mload(a))\n      // Copy `b` one word at a time, backwards.\n      for {\n        let o := and(add(bLength, 32), w)\n      } 1 {\n\n      } {\n        mstore(add(output, o), mload(add(b, o)))\n        o := add(o, w) // `sub(o, 0x20)`.\n        if iszero(o) {\n          break\n        }\n      }\n      let totalLength := add(aLength, bLength)\n      let last := add(add(result, 0x20), totalLength)\n      // Zeroize the slot after the string.\n      mstore(last, 0)\n      // Stores the length.\n      mstore(result, totalLength)\n      // Allocate memory for the length and the bytes,\n      // rounded up to a multiple of 32.\n      mstore(0x40, and(add(last, 31), w))\n    }\n  }\n\n  /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\n  function toCase(string memory subject, bool toUpper) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let length := mload(subject)\n      if length {\n        result := add(mload(0x40), 0x20)\n        subject := add(subject, 1)\n        let flags := shl(add(70, shl(5, toUpper)), 67108863)\n        let w := not(0)\n        for {\n          let o := length\n        } 1 {\n\n        } {\n          o := add(o, w)\n          let b := and(0xff, mload(add(subject, o)))\n          mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\n          if iszero(o) {\n            break\n          }\n        }\n        // Restore the result.\n        result := mload(0x40)\n        // Stores the string length.\n        mstore(result, length)\n        // Zeroize the slot after the string.\n        let last := add(add(result, 0x20), length)\n        mstore(last, 0)\n        // Allocate memory for the length and the bytes,\n        // rounded up to a multiple of 32.\n        mstore(0x40, and(add(last, 31), not(31)))\n      }\n    }\n  }\n\n  /// @dev Returns a lowercased copy of the string.\n  function lower(string memory subject) internal pure returns (string memory result) {\n    result = toCase(subject, false);\n  }\n\n  /// @dev Returns an UPPERCASED copy of the string.\n  function upper(string memory subject) internal pure returns (string memory result) {\n    result = toCase(subject, true);\n  }\n\n  /// @dev Escapes the string to be used within HTML tags.\n  function escapeHTML(string memory s) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      for {\n        let end := add(s, mload(s))\n        result := add(mload(0x40), 0x20)\n        // Store the bytes of the packed offsets and strides into the scratch space.\n        // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\n        mstore(0x1f, 0x900094)\n        mstore(0x08, 0xc0000000a6ab)\n        // Store \"&quot;&amp;&#39;&lt;&gt;\" into the scratch space.\n        mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\n      } iszero(eq(s, end)) {\n\n      } {\n        s := add(s, 1)\n        let c := and(mload(s), 0xff)\n        // Not in `[\"\\\"\",\"'\",\"&\",\"<\",\">\"]`.\n        if iszero(and(shl(c, 1), 0x500000c400000000)) {\n          mstore8(result, c)\n          result := add(result, 1)\n          continue\n        }\n        let t := shr(248, mload(c))\n        mstore(result, mload(and(t, 31)))\n        result := add(result, shr(5, t))\n      }\n      let last := result\n      // Zeroize the slot after the string.\n      mstore(last, 0)\n      // Restore the result to the start of the free memory.\n      result := mload(0x40)\n      // Store the length of the result.\n      mstore(result, sub(last, add(result, 0x20)))\n      // Allocate memory for the length and the bytes,\n      // rounded up to a multiple of 32.\n      mstore(0x40, and(add(last, 31), not(31)))\n    }\n  }\n\n  /// @dev Escapes the string to be used within double-quotes in a JSON.\n  function escapeJSON(string memory s) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      for {\n        let end := add(s, mload(s))\n        result := add(mload(0x40), 0x20)\n        // Store \"\\\\u0000\" in scratch space.\n        // Store \"0123456789abcdef\" in scratch space.\n        // Also, store `{0x08:\"b\", 0x09:\"t\", 0x0a:\"n\", 0x0c:\"f\", 0x0d:\"r\"}`.\n        // into the scratch space.\n        mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\n        // Bitmask for detecting `[\"\\\"\",\"\\\\\"]`.\n        let e := or(shl(0x22, 1), shl(0x5c, 1))\n      } iszero(eq(s, end)) {\n\n      } {\n        s := add(s, 1)\n        let c := and(mload(s), 0xff)\n        if iszero(lt(c, 0x20)) {\n          if iszero(and(shl(c, 1), e)) {\n            // Not in `[\"\\\"\",\"\\\\\"]`.\n            mstore8(result, c)\n            result := add(result, 1)\n            continue\n          }\n          mstore8(result, 0x5c) // \"\\\\\".\n          mstore8(add(result, 1), c)\n          result := add(result, 2)\n          continue\n        }\n        if iszero(and(shl(c, 1), 0x3700)) {\n          // Not in `[\"\\b\",\"\\t\",\"\\n\",\"\\f\",\"\\d\"]`.\n          mstore8(0x1d, mload(shr(4, c))) // Hex value.\n          mstore8(0x1e, mload(and(c, 15))) // Hex value.\n          mstore(result, mload(0x19)) // \"\\\\u00XX\".\n          result := add(result, 6)\n          continue\n        }\n        mstore8(result, 0x5c) // \"\\\\\".\n        mstore8(add(result, 1), mload(add(c, 8)))\n        result := add(result, 2)\n      }\n      let last := result\n      // Zeroize the slot after the string.\n      mstore(last, 0)\n      // Restore the result to the start of the free memory.\n      result := mload(0x40)\n      // Store the length of the result.\n      mstore(result, sub(last, add(result, 0x20)))\n      // Allocate memory for the length and the bytes,\n      // rounded up to a multiple of 32.\n      mstore(0x40, and(add(last, 31), not(31)))\n    }\n  }\n\n  /// @dev Returns whether `a` equals `b`.\n  function eq(string memory a, string memory b) internal pure returns (bool result) {\n    assembly {\n      result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\n    }\n  }\n\n  /// @dev Packs a single string with its length into a single word.\n  /// Returns `bytes32(0)` if the length is zero or greater than 31.\n  function packOne(string memory a) internal pure returns (bytes32 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // We don't need to zero right pad the string,\n      // since this is our own custom non-standard packing scheme.\n      result := mul(\n        // Load the length and the bytes.\n        mload(add(a, 0x1f)),\n        // `length != 0 && length < 32`. Abuses underflow.\n        // Assumes that the length is valid and within the block gas limit.\n        lt(sub(mload(a), 1), 0x1f)\n      )\n    }\n  }\n\n  /// @dev Unpacks a string packed using {packOne}.\n  /// Returns the empty string if `packed` is `bytes32(0)`.\n  /// If `packed` is not an output of {packOne}, the output behaviour is undefined.\n  function unpackOne(bytes32 packed) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // Grab the free memory pointer.\n      result := mload(0x40)\n      // Allocate 2 words (1 for the length, 1 for the bytes).\n      mstore(0x40, add(result, 0x40))\n      // Zeroize the length slot.\n      mstore(result, 0)\n      // Store the length and bytes.\n      mstore(add(result, 0x1f), packed)\n      // Right pad with zeroes.\n      mstore(add(add(result, 0x20), mload(result)), 0)\n    }\n  }\n\n  /// @dev Packs two strings with their lengths into a single word.\n  /// Returns `bytes32(0)` if combined length is zero or greater than 30.\n  function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let aLength := mload(a)\n      // We don't need to zero right pad the strings,\n      // since this is our own custom non-standard packing scheme.\n      result := mul(\n        // Load the length and the bytes of `a` and `b`.\n        or(shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))), mload(sub(add(b, 0x1e), aLength))),\n        // `totalLength != 0 && totalLength < 31`. Abuses underflow.\n        // Assumes that the lengths are valid and within the block gas limit.\n        lt(sub(add(aLength, mload(b)), 1), 0x1e)\n      )\n    }\n  }\n\n  /// @dev Unpacks strings packed using {packTwo}.\n  /// Returns the empty strings if `packed` is `bytes32(0)`.\n  /// If `packed` is not an output of {packTwo}, the output behaviour is undefined.\n  function unpackTwo(bytes32 packed) internal pure returns (string memory resultA, string memory resultB) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // Grab the free memory pointer.\n      resultA := mload(0x40)\n      resultB := add(resultA, 0x40)\n      // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\n      mstore(0x40, add(resultB, 0x40))\n      // Zeroize the length slots.\n      mstore(resultA, 0)\n      mstore(resultB, 0)\n      // Store the lengths and bytes.\n      mstore(add(resultA, 0x1f), packed)\n      mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\n      // Right pad with zeroes.\n      mstore(add(add(resultA, 0x20), mload(resultA)), 0)\n      mstore(add(add(resultB, 0x20), mload(resultB)), 0)\n    }\n  }\n\n  /// @dev Directly returns `a` without copying.\n  function directReturn(string memory a) internal pure {\n    assembly {\n      // Assumes that the string does not start from the scratch space.\n      let retStart := sub(a, 0x20)\n      let retSize := add(mload(a), 0x40)\n      // Right pad with zeroes. Just in case the string is produced\n      // by a method that doesn't zero right pad.\n      mstore(add(retStart, retSize), 0)\n      // Store the return offset.\n      mstore(retStart, 0x20)\n      // End the transaction, returning the string.\n      return(retStart, retSize)\n    }\n  }\n}\n"},"src/OnchainSteamboatWillie.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nimport { ERC721A } from \"@erc721a/ERC721A.sol\";\nimport { NFTEventsAndErrors } from \"./NFTEventsAndErrors.sol\";\nimport { Utils } from \"./utils/Utils.sol\";\nimport { Constants } from \"./utils/Constants.sol\";\nimport { LibString } from \"./utils/LibString.sol\";\nimport { LibPRNG } from \"./LibPRNG.sol\";\nimport { SVG } from \"./utils/SVG.sol\";\nimport { AllowList } from \"./utils/AllowList.sol\";\nimport { SSTORE2 } from \"@solady/utils/SSTORE2.sol\";\n\n/// @title Onchain Steamboat Willie\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\ncontract OnchainSteamboatWillie is ERC721A, NFTEventsAndErrors, Constants, AllowList {\n    using LibString for uint16;\n    using LibPRNG for LibPRNG.PRNG;\n\n    bool public publicMintEnabled;\n    uint16 internal immutable _allowListMintMaxTotal;\n    uint8 internal immutable _allowListMintMaxPerWallet;\n    mapping(address user => uint8 minted) internal _allowListMinted;\n    mapping(uint256 token => bytes32 seed) public tokenToSeed;\n\n    address public artPtr0;\n    address public artPtr1;\n    address public artPtr2;\n\n    string public ANIMATION_SCRIPT =\n        '<script>let a=!1,b=!1,s=e=>new Promise(t=>setTimeout(t,e)),c=()=>Math.floor(256*Math.random()),randomRgb=()=>`rgb(${c()},${c()},${c()})`;document.body.addEventListener(\"click\",async()=>{if(b&&!a){a=!0;return}if(b)return;b=!0;let e=document.getElementsByTagName(\"path\"),t=document.getElementsByTagName(\"ellipse\");for(;b;){for(let l=0;l<e.length;l++)(\"p\"!==e[l].getAttribute(\"id\")||a)&&(e[l].style.stroke=randomRgb(),e[l].style.fill=randomRgb());for(let r=0;r<t.length;r++)t[r].style.stroke=randomRgb(),t[r].style.fill=randomRgb();await s(60)}b=!1},!0);</script>';\n\n    constructor(\n        bytes32 allowListMerkleRoot,\n        uint16 allowListMintMaxTotalVal,\n        uint8 allowListMintMaxPerWalletVal\n    )\n        AllowList(allowListMerkleRoot)\n        ERC721A(\"Onchain Steamboat Willie\", \"ONCHAINWILLIE\")\n    {\n        _allowListMintMaxTotal = allowListMintMaxTotalVal;\n        _allowListMintMaxPerWallet = allowListMintMaxPerWalletVal;\n    }\n\n    // Art\n\n    /// @notice Set art for the collection.\n    function setArt(uint8 ptrNum, string calldata art) external onlyOwner {\n        if (ptrNum == 0) {\n            artPtr0 = SSTORE2.write(bytes(art));\n        } else if (ptrNum == 1) {\n            artPtr1 = SSTORE2.write(bytes(art));\n        } else if (ptrNum == 2) {\n            artPtr2 = SSTORE2.write(bytes(art));\n        }\n    }\n\n    /// @notice Update public mint enabled.\n    /// @param enabled public mint enabled.\n    function updatePublicMintEnabled(bool enabled) external onlyOwner {\n        publicMintEnabled = enabled;\n    }\n\n    /// @notice Mint tokens for allowlist minters.\n    /// @param proof proof\n    /// @param amount amount of tokens to mint\n    function mintAllowList(bytes32[] calldata proof, uint8 amount) external onlyAllowListed(proof) {\n        // Checks\n        unchecked {\n            if (_totalMinted() + amount > _allowListMintMaxTotal) {\n                // Check allowlist mint total is not exceeding max allowed to be minted during allowlist phase\n                revert AllowListMintCapExceeded();\n            }\n\n            if (_allowListMinted[msg.sender] + amount > _allowListMintMaxPerWallet) {\n                // Check wallet is not exceeding max allowed during allowlist phase\n                revert AllowListMintCapPerWalletExceeded();\n            }\n        }\n\n        // Effects\n\n        // Increase allowlist minted by amount\n        unchecked {\n            _allowListMinted[msg.sender] += amount;\n        }\n\n        // Perform mint\n        _coreMint(msg.sender, amount);\n    }\n\n    /// @notice Mint tokens.\n    /// @param amount amount of tokens to mint\n    function mintPublic(uint8 amount) external payable {\n        // Checks\n        if (!publicMintEnabled) {\n            // Check public mint enabled\n            revert PublicMintNotEnabled();\n        }\n\n        unchecked {\n            if (amount * PRICE != msg.value) {\n                // Check payment by sender is correct\n                revert IncorrectPayment();\n            }\n        }\n\n        _coreMint(msg.sender, amount);\n    }\n\n    function _coreMint(address to, uint8 amount) internal {\n        // Checks\n        uint256 nextTokenIdToBeMinted = _nextTokenId();\n\n        unchecked {\n            if (MAX_SUPPLY + 1 < nextTokenIdToBeMinted + amount) {\n                // Check max supply not exceeded\n                revert MaxSupplyReached();\n            }\n\n            // Set seed\n            for (uint256 i = nextTokenIdToBeMinted; i < nextTokenIdToBeMinted + amount;) {\n                tokenToSeed[i] = keccak256(abi.encodePacked(block.prevrandao, i));\n                ++i;\n            }\n        }\n\n        // Perform mint\n        _mint(to, amount);\n    }\n\n    function _startTokenId() internal pure override returns (uint256) {\n        return 1;\n    }\n\n    /// @notice Withdraw all ETH from the contract.\n    function withdraw() external {\n        (bool success,) = _VAULT_ADDRESS.call{ value: address(this).balance }(\"\");\n        require(success);\n    }\n\n    /// @notice Get art color hue.\n    /// @param tokenId token id\n    /// @return hue\n    function getColorHue(uint256 tokenId) public view returns (uint16 hue) {\n        LibPRNG.PRNG memory prng;\n        prng.seed(keccak256(abi.encodePacked(tokenToSeed[tokenId], uint256(1001))));\n        return uint16(prng.uniform(360));\n    }\n\n    /// @notice Get art svg for token.\n    /// @param tokenId token id\n    /// @return art\n    function art(uint256 tokenId) public view returns (string memory) {\n        if (!_exists(tokenId)) {\n            revert URIQueryForNonexistentToken();\n        }\n\n        string memory colorHueStr = getColorHue(tokenId).toString();\n        string memory backgroundColor = string.concat(\"hsla(\", colorHueStr, \",50%,92%,100%);\");\n        return string.concat(\n            string(SSTORE2.read(artPtr0)),\n            \"hsla(\",\n            colorHueStr,\n            \",50%,13%,100%)}#v{background-color:\",\n            backgroundColor,\n            \"}.h{fill:\",\n            backgroundColor,\n            \"}\",\n            string(SSTORE2.read(artPtr1)),\n            string(SSTORE2.read(artPtr2))\n        );\n    }\n\n    /// @notice Get token uri for token.\n    /// @param tokenId token id\n    /// @return tokenURI\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) {\n            revert URIQueryForNonexistentToken();\n        }\n\n        string memory artSvg = art(tokenId);\n\n        return Utils.formatTokenURI(\n            tokenId,\n            string.concat(\"data:image/svg+xml;base64,\", Utils.encodeBase64(bytes(artSvg))),\n            string.concat(\n                \"data:text/html;base64,\",\n                Utils.encodeBase64(\n                    bytes(\n                        string.concat(\n                            '<html style=\"overflow:hidden\"><body style=\"margin:0\">',\n                            artSvg,\n                            ANIMATION_SCRIPT,\n                            \"</body></html>\"\n                        )\n                    )\n                )\n            ),\n            string.concat(\"[\", Utils.getTrait(\"Hue\", getColorHue(tokenId).toString(), true, false), \"]\")\n        );\n    }\n}\n"},"lib/seadrop/src/ERC721SeaDrop.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\nimport {ERC721ContractMetadata, ISeaDropTokenContractMetadata} from \"./ERC721ContractMetadata.sol\";\n\nimport {INonFungibleSeaDropToken} from \"./interfaces/INonFungibleSeaDropToken.sol\";\n\nimport {ISeaDrop} from \"./interfaces/ISeaDrop.sol\";\n\nimport {AllowListData, PublicDrop, TokenGatedDropStage, SignedMintValidationParams} from \"./lib/SeaDropStructs.sol\";\n\nimport {ERC721SeaDropStructsErrorsAndEvents} from \"./lib/ERC721SeaDropStructsErrorsAndEvents.sol\";\n\nimport {ERC721A} from \"ERC721A/ERC721A.sol\";\n\nimport {ReentrancyGuard} from \"solmate/utils/ReentrancyGuard.sol\";\n\nimport {IERC165} from \"openzeppelin-contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title  ERC721SeaDrop\n * @author James Wenzel (emo.eth)\n * @author Ryan Ghods (ralxz.eth)\n * @author Stephan Min (stephanm.eth)\n * @author Michael Cohen (notmichael.eth)\n * @notice ERC721SeaDrop is a token contract that contains methods\n *         to properly interact with SeaDrop.\n */\ncontract ERC721SeaDrop is\n    ERC721ContractMetadata,\n    INonFungibleSeaDropToken,\n    ERC721SeaDropStructsErrorsAndEvents,\n    ReentrancyGuard\n{\n    /// @notice Track the allowed SeaDrop addresses.\n    mapping(address => bool) internal _allowedSeaDrop;\n\n    /// @notice Track the enumerated allowed SeaDrop addresses.\n    address[] internal _enumeratedAllowedSeaDrop;\n\n    /**\n     * @dev Reverts if not an allowed SeaDrop contract.\n     *      This function is inlined instead of being a modifier\n     *      to save contract space from being inlined N times.\n     *\n     * @param seaDrop The SeaDrop address to check if allowed.\n     */\n    function _onlyAllowedSeaDrop(address seaDrop) internal view {\n        if (_allowedSeaDrop[seaDrop] != true) {\n            revert OnlyAllowedSeaDrop();\n        }\n    }\n\n    /**\n     * @notice Deploy the token contract with its name, symbol,\n     *         and allowed SeaDrop addresses.\n     */\n    constructor(string memory name, string memory symbol, address[] memory allowedSeaDrop)\n        ERC721ContractMetadata(name, symbol)\n    {\n        // Put the length on the stack for more efficient access.\n        uint256 allowedSeaDropLength = allowedSeaDrop.length;\n\n        // Set the mapping for allowed SeaDrop contracts.\n        for (uint256 i = 0; i < allowedSeaDropLength;) {\n            _allowedSeaDrop[allowedSeaDrop[i]] = true;\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Set the enumeration.\n        _enumeratedAllowedSeaDrop = allowedSeaDrop;\n\n        // Emit an event noting the contract deployment.\n        emit SeaDropTokenDeployed();\n    }\n\n    /**\n     * @notice Update the allowed SeaDrop contracts.\n     *         Only the owner can use this function.\n     *\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\n     */\n    function updateAllowedSeaDrop(address[] calldata allowedSeaDrop) external virtual override onlyOwner {\n        _updateAllowedSeaDrop(allowedSeaDrop);\n    }\n\n    /**\n     * @notice Internal function to update the allowed SeaDrop contracts.\n     *\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\n     */\n    function _updateAllowedSeaDrop(address[] calldata allowedSeaDrop) internal {\n        // Put the length on the stack for more efficient access.\n        uint256 enumeratedAllowedSeaDropLength = _enumeratedAllowedSeaDrop.length;\n        uint256 allowedSeaDropLength = allowedSeaDrop.length;\n\n        // Reset the old mapping.\n        for (uint256 i = 0; i < enumeratedAllowedSeaDropLength;) {\n            _allowedSeaDrop[_enumeratedAllowedSeaDrop[i]] = false;\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Set the new mapping for allowed SeaDrop contracts.\n        for (uint256 i = 0; i < allowedSeaDropLength;) {\n            _allowedSeaDrop[allowedSeaDrop[i]] = true;\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Set the enumeration.\n        _enumeratedAllowedSeaDrop = allowedSeaDrop;\n\n        // Emit an event for the update.\n        emit AllowedSeaDropUpdated(allowedSeaDrop);\n    }\n\n    /**\n     * @dev Overrides the `_startTokenId` function from ERC721A\n     *      to start at token id `1`.\n     *\n     *      This is to avoid future possible problems since `0` is usually\n     *      used to signal values that have not been set or have been removed.\n     */\n    function _startTokenId() internal view virtual override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev Overrides the `tokenURI()` function from ERC721A\n     *      to return just the base URI if it is implied to not be a directory.\n     *\n     *      This is to help with ERC721 contracts in which the same token URI\n     *      is desired for each token, such as when the tokenURI is 'unrevealed'.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @notice Mint tokens, restricted to the SeaDrop contract.\n     *\n     * @dev    NOTE: If a token registers itself with multiple SeaDrop\n     *         contracts, the implementation of this function should guard\n     *         against reentrancy. If the implementing token uses\n     *         _safeMint(), or a feeRecipient with a malicious receive() hook\n     *         is specified, the token or fee recipients may be able to execute\n     *         another mint in the same transaction via a separate SeaDrop\n     *         contract.\n     *         This is dangerous if an implementing token does not correctly\n     *         update the minterNumMinted and currentTotalSupply values before\n     *         transferring minted tokens, as SeaDrop references these values\n     *         to enforce token limits on a per-wallet and per-stage basis.\n     *\n     *         ERC721A tracks these values automatically, but this note and\n     *         nonReentrant modifier are left here to encourage best-practices\n     *         when referencing this contract.\n     *\n     * @param minter   The address to mint to.\n     * @param quantity The number of tokens to mint.\n     */\n    function mintSeaDrop(address minter, uint256 quantity) external virtual override nonReentrant {\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(msg.sender);\n\n        // Extra safety check to ensure the max supply is not exceeded.\n        if (_totalMinted() + quantity > maxSupply()) {\n            revert MintQuantityExceedsMaxSupply(_totalMinted() + quantity, maxSupply());\n        }\n\n        // Mint the quantity of tokens to the minter.\n        _safeMint(minter, quantity);\n    }\n\n    /**\n     * @notice Update the public drop data for this nft contract on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param publicDrop  The public drop data.\n     */\n    function updatePublicDrop(address seaDropImpl, PublicDrop calldata publicDrop) external virtual override {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the public drop data on SeaDrop.\n        ISeaDrop(seaDropImpl).updatePublicDrop(publicDrop);\n    }\n\n    /**\n     * @notice Update the allow list data for this nft contract on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl   The allowed SeaDrop contract.\n     * @param allowListData The allow list data.\n     */\n    function updateAllowList(address seaDropImpl, AllowListData calldata allowListData) external virtual override {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the allow list on SeaDrop.\n        ISeaDrop(seaDropImpl).updateAllowList(allowListData);\n    }\n\n    /**\n     * @notice Update the token gated drop stage data for this nft contract\n     *         on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\n     *         simultaneous token gated drop promotions for each other,\n     *         they can be minted by the same actor until\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\n     *         `allowedNftToken` is not running an active drop during the\n     *         `dropStage` time period.\n     *\n     * @param seaDropImpl     The allowed SeaDrop contract.\n     * @param allowedNftToken The allowed nft token.\n     * @param dropStage       The token gated drop stage data.\n     */\n    function updateTokenGatedDrop(address seaDropImpl, address allowedNftToken, TokenGatedDropStage calldata dropStage)\n        external\n        virtual\n        override\n    {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the token gated drop stage.\n        ISeaDrop(seaDropImpl).updateTokenGatedDrop(allowedNftToken, dropStage);\n    }\n\n    /**\n     * @notice Update the drop URI for this nft contract on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param dropURI     The new drop URI.\n     */\n    function updateDropURI(address seaDropImpl, string calldata dropURI) external virtual override {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the drop URI.\n        ISeaDrop(seaDropImpl).updateDropURI(dropURI);\n    }\n\n    /**\n     * @notice Update the creator payout address for this nft contract on\n     *         SeaDrop.\n     *         Only the owner can set the creator payout address.\n     *\n     * @param seaDropImpl   The allowed SeaDrop contract.\n     * @param payoutAddress The new payout address.\n     */\n    function updateCreatorPayoutAddress(address seaDropImpl, address payoutAddress) external {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the creator payout address.\n        ISeaDrop(seaDropImpl).updateCreatorPayoutAddress(payoutAddress);\n    }\n\n    /**\n     * @notice Update the allowed fee recipient for this nft contract\n     *         on SeaDrop.\n     *         Only the owner can set the allowed fee recipient.\n     *\n     * @param seaDropImpl  The allowed SeaDrop contract.\n     * @param feeRecipient The new fee recipient.\n     * @param allowed      If the fee recipient is allowed.\n     */\n    function updateAllowedFeeRecipient(address seaDropImpl, address feeRecipient, bool allowed) external virtual {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the allowed fee recipient.\n        ISeaDrop(seaDropImpl).updateAllowedFeeRecipient(feeRecipient, allowed);\n    }\n\n    /**\n     * @notice Update the server-side signers for this nft contract\n     *         on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl                The allowed SeaDrop contract.\n     * @param signer                     The signer to update.\n     * @param signedMintValidationParams Minimum and maximum parameters to\n     *                                   enforce for signed mints.\n     */\n    function updateSignedMintValidationParams(\n        address seaDropImpl,\n        address signer,\n        SignedMintValidationParams memory signedMintValidationParams\n    ) external virtual override {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the signer.\n        ISeaDrop(seaDropImpl).updateSignedMintValidationParams(signer, signedMintValidationParams);\n    }\n\n    /**\n     * @notice Update the allowed payers for this nft contract on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param payer       The payer to update.\n     * @param allowed     Whether the payer is allowed.\n     */\n    function updatePayer(address seaDropImpl, address payer, bool allowed) external virtual override {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the SeaDrop is allowed.\n        _onlyAllowedSeaDrop(seaDropImpl);\n\n        // Update the payer.\n        ISeaDrop(seaDropImpl).updatePayer(payer, allowed);\n    }\n\n    /**\n     * @notice Returns a set of mint stats for the address.\n     *         This assists SeaDrop in enforcing maxSupply,\n     *         maxTotalMintableByWallet, and maxTokenSupplyForStage checks.\n     *\n     * @dev    NOTE: Implementing contracts should always update these numbers\n     *         before transferring any tokens with _safeMint() to mitigate\n     *         consequences of malicious onERC721Received() hooks.\n     *\n     * @param minter The minter address.\n     */\n    function getMintStats(address minter)\n        external\n        view\n        override\n        returns (uint256 minterNumMinted, uint256 currentTotalSupply, uint256 maxSupply)\n    {\n        minterNumMinted = _numberMinted(minter);\n        currentTotalSupply = _totalMinted();\n        maxSupply = _maxSupply;\n    }\n\n    /**\n     * @notice Returns whether the interface is supported.\n     *\n     * @param interfaceId The interface id to check against.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC721ContractMetadata)\n        returns (bool)\n    {\n        return interfaceId == type(INonFungibleSeaDropToken).interfaceId\n            || interfaceId == type(ISeaDropTokenContractMetadata).interfaceId\n        // ERC721ContractMetadata returns supportsInterface true for\n        //     EIP-2981\n        // ERC721A returns supportsInterface true for\n        //     ERC165, ERC721, ERC721Metadata\n        || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     * - The `operator` must be allowed.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public override {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    /**\n     * @notice Configure multiple properties at a time.\n     *\n     *         Note: The individual configure methods should be used\n     *         to unset or reset any properties to zero, as this method\n     *         will ignore zero-value properties in the config struct.\n     *\n     * @param config The configuration struct.\n     */\n    function multiConfigure(MultiConfigureStruct calldata config) external onlyOwner {\n        if (config.maxSupply > 0) {\n            this.setMaxSupply(config.maxSupply);\n        }\n        if (bytes(config.baseURI).length != 0) {\n            this.setBaseURI(config.baseURI);\n        }\n        if (bytes(config.contractURI).length != 0) {\n            this.setContractURI(config.contractURI);\n        }\n        if (_cast(config.publicDrop.startTime != 0) | _cast(config.publicDrop.endTime != 0) == 1) {\n            this.updatePublicDrop(config.seaDropImpl, config.publicDrop);\n        }\n        if (bytes(config.dropURI).length != 0) {\n            this.updateDropURI(config.seaDropImpl, config.dropURI);\n        }\n        if (config.allowListData.merkleRoot != bytes32(0)) {\n            this.updateAllowList(config.seaDropImpl, config.allowListData);\n        }\n        if (config.creatorPayoutAddress != address(0)) {\n            this.updateCreatorPayoutAddress(config.seaDropImpl, config.creatorPayoutAddress);\n        }\n        if (config.provenanceHash != bytes32(0)) {\n            this.setProvenanceHash(config.provenanceHash);\n        }\n        if (config.allowedFeeRecipients.length > 0) {\n            for (uint256 i = 0; i < config.allowedFeeRecipients.length;) {\n                this.updateAllowedFeeRecipient(config.seaDropImpl, config.allowedFeeRecipients[i], true);\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.disallowedFeeRecipients.length > 0) {\n            for (uint256 i = 0; i < config.disallowedFeeRecipients.length;) {\n                this.updateAllowedFeeRecipient(config.seaDropImpl, config.disallowedFeeRecipients[i], false);\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.allowedPayers.length > 0) {\n            for (uint256 i = 0; i < config.allowedPayers.length;) {\n                this.updatePayer(config.seaDropImpl, config.allowedPayers[i], true);\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.disallowedPayers.length > 0) {\n            for (uint256 i = 0; i < config.disallowedPayers.length;) {\n                this.updatePayer(config.seaDropImpl, config.disallowedPayers[i], false);\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.tokenGatedDropStages.length > 0) {\n            if (config.tokenGatedDropStages.length != config.tokenGatedAllowedNftTokens.length) {\n                revert TokenGatedMismatch();\n            }\n            for (uint256 i = 0; i < config.tokenGatedDropStages.length;) {\n                this.updateTokenGatedDrop(\n                    config.seaDropImpl, config.tokenGatedAllowedNftTokens[i], config.tokenGatedDropStages[i]\n                );\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.disallowedTokenGatedAllowedNftTokens.length > 0) {\n            for (uint256 i = 0; i < config.disallowedTokenGatedAllowedNftTokens.length;) {\n                TokenGatedDropStage memory emptyStage;\n                this.updateTokenGatedDrop(\n                    config.seaDropImpl, config.disallowedTokenGatedAllowedNftTokens[i], emptyStage\n                );\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.signedMintValidationParams.length > 0) {\n            if (config.signedMintValidationParams.length != config.signers.length) {\n                revert SignersMismatch();\n            }\n            for (uint256 i = 0; i < config.signedMintValidationParams.length;) {\n                this.updateSignedMintValidationParams(\n                    config.seaDropImpl, config.signers[i], config.signedMintValidationParams[i]\n                );\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        if (config.disallowedSigners.length > 0) {\n            for (uint256 i = 0; i < config.disallowedSigners.length;) {\n                SignedMintValidationParams memory emptyParams;\n                this.updateSignedMintValidationParams(config.seaDropImpl, config.disallowedSigners[i], emptyParams);\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n    }\n}\n"},"src/warhol/SharedConstants.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\ncontract SharedConstants {\n    uint8 internal constant SMALL_TOKEN_COUNT = 4;\n    uint8 internal constant LARGE_TOKEN_COUNT = 9;\n}\n"},"src/warhol/Renderer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nimport { NFTEventsAndErrors } from \"./NFTEventsAndErrors.sol\";\nimport { Utils } from \"./Utils.sol\";\nimport { LibString } from \"../utils/LibString.sol\";\nimport { LibPRNG } from \"../LibPRNG.sol\";\nimport { OnchainSteamboatWillie } from \"../OnchainSteamboatWillie.sol\";\nimport { SharedConstants } from \"./SharedConstants.sol\";\n\n/// @title Renderer\n/// @author Aspyn Palatnick (aspyn.eth, stuckinaboot.eth)\ncontract Renderer is SharedConstants {\n    using LibString for uint16;\n    using LibString for uint8;\n\n    OnchainSteamboatWillie internal onchainSteamboatWillie;\n\n    constructor(address onchainSteamboatWillieAddr) {\n        onchainSteamboatWillie = OnchainSteamboatWillie(onchainSteamboatWillieAddr);\n    }\n\n    /// @notice Get complete art.\n    /// @param willies willies\n    function art(uint16[] calldata willies) public view returns (string memory) {\n        return string.concat(\n            '<svg id=\"rt\" width=\"100%\" height=\"100%\" viewBox=\"0 0 400 400\" xmlns=\"http://www.w3.org/2000/svg\">',\n            '<svg width=\"100%\" height=\"100%\" shape-rendering=\"crispEdges\">',\n            artBaseWillies(willies, true),\n            \"</svg>\",\n            artBaseWillies(willies, false),\n            artStyle(willies),\n            \"</svg>\"\n        );\n    }\n\n    function xyStr(uint8 i, uint8 rowSize) internal pure returns (string memory) {\n        string memory x = Utils.getDecimalStringFrom1e18ScaledUint256(uint256(i % rowSize) * 1e18 * 100 / rowSize);\n        string memory y = Utils.getDecimalStringFrom1e18ScaledUint256(uint256(i / rowSize) * 1e18 * 100 / rowSize);\n        return string.concat(' x=\"', x, '%\" y=\"', y, '%\" ');\n    }\n\n    /// @notice Get base art.\n    /// @param willies willies\n    /// @param onlyRects only rects\n    function artBaseWillies(uint16[] calldata willies, bool onlyRects) public view returns (string memory art) {\n        bool large = willies.length == LARGE_TOKEN_COUNT;\n        uint8 totalWillies = large ? LARGE_TOKEN_COUNT : SMALL_TOKEN_COUNT;\n        uint8 rowSize = large ? 3 : 2;\n        string memory rowScale = large ? \"33.33333%\" : \"50%\";\n        string memory widthHeight = string.concat('width=\"', rowScale, '\" height=\"', rowScale, '\">');\n\n        string[LARGE_TOKEN_COUNT] memory willieArt;\n        unchecked {\n            for (uint8 i; i < willies.length;) {\n                uint16 willieId = willies[i];\n                string memory xyStr = xyStr(i, rowSize);\n                willieArt[i] = onlyRects\n                    ? string.concat(\n                        \"<rect\", xyStr, 'width=\"', rowScale, '\" height=\"', rowScale, '\" class=\"h', i.toString(), '\" />'\n                    )\n                    : string.concat(\n                        '<svg class=\"k\" id=\"foo',\n                        i.toString(),\n                        '\"',\n                        xyStr,\n                        widthHeight,\n                        onchainSteamboatWillie.art(willieId),\n                        \"</svg>\"\n                    );\n                ++i;\n            }\n            art = string.concat(\n                willieArt[0],\n                willieArt[1],\n                willieArt[2],\n                willieArt[3],\n                // These will be empty if large is false, which is fine\n                willieArt[4],\n                willieArt[5],\n                willieArt[6],\n                willieArt[7],\n                willieArt[8]\n            );\n        }\n    }\n\n    /// @notice Get art style.\n    /// @param willies willies\n    function artStyle(uint16[] calldata willies) public view returns (string memory art) {\n        bool large = willies.length == LARGE_TOKEN_COUNT;\n        uint8 totalWillies = large ? LARGE_TOKEN_COUNT : SMALL_TOKEN_COUNT;\n\n        art = \"<style>#rt {max-width: 1200px; max-height: 1200px; } \";\n        unchecked {\n            for (uint8 i; i < willies.length;) {\n                string memory colorHueStr = onchainSteamboatWillie.getColorHue(willies[i]).toString();\n                string memory backgroundColor = string.concat(\"hsla(\", colorHueStr, \",50%,92%,100%);\");\n\n                string memory id = string.concat(\"#foo\", i.toString());\n                art = string.concat(\n                    art,\n                    id,\n                    \" .d{fill:hsla(\",\n                    colorHueStr,\n                    \",70%,70%,100%);} \",\n                    id,\n                    \" #v {background-color:\",\n                    backgroundColor,\n                    \"} \",\n                    id,\n                    \" .h, .h\",\n                    i.toString(),\n                    \" {fill:\",\n                    backgroundColor,\n                    \"}\"\n                );\n                ++i;\n            }\n        }\n        art = string.concat(art, \"</style>\");\n    }\n\n    /// @notice Get art animation script.\n    /// @param willies willies\n    function artScript(uint16[] calldata willies) public view returns (string memory art) {\n        bool large = willies.length == LARGE_TOKEN_COUNT;\n        uint8 totalWillies = large ? LARGE_TOKEN_COUNT : SMALL_TOKEN_COUNT;\n\n        art = \"<script>let bH=[\";\n        unchecked {\n            for (uint8 i; i < willies.length;) {\n                string memory colorHueStr = onchainSteamboatWillie.getColorHue(willies[i]).toString();\n                art = string.concat(art, colorHueStr, i < willies.length - 1 ? \",\" : \"\");\n                ++i;\n            }\n        }\n        return string.concat(\n            art,\n            '],a=!1,b=!1,s=t=>new Promise(e=>setTimeout(e,t)),c=()=>Math.floor(256*Math.random()),randomBrightHsla=t=>`hsl(${t},70%,70%`,currentlyRendering=!1,paths=Array.from(document.getElementsByTagName(\"path\")),ellipses=Array.from(document.getElementsByTagName(\"ellipse\"));const originalPathData=Array.from(paths).map(t=>({fill:t.getAttribute(\"fill\"),class:t.getAttribute(\"class\"),stroke:t.getAttribute(\"stroke\")})),originalEllipseData=Array.from(ellipses).map(t=>({fill:t.getAttribute(\"fill\"),class:t.getAttribute(\"class\"),stroke:t.getAttribute(\"stroke\")}));let renderFlow=async()=>{if(currentlyRendering)return;currentlyRendering=!0;for(let t=0;t<paths.length;t++)paths[t].setAttribute(\"fill\",\"none\"),paths[t].setAttribute(\"class\",\"\"),paths[t].setAttribute(\"pathLength\",100),paths[t].setAttribute(\"stroke-dasharray\",\"100\"),paths[t].setAttribute(\"stroke-dashoffset\",\"100\");for(let e=0;e<ellipses.length;e++)ellipses[e].setAttribute(\"stroke-dasharray\",\"100\"),ellipses[e].setAttribute(\"stroke-dashoffset\",\"100\");async function l(t,e,l){let r=parseFloat(paths[t].getAttribute(\"stroke-dashoffset\"));for(l||\"d\"!==originalPathData[t].class||paths[t].setAttribute(\"fill\",randomBrightHsla(bH[e])),l&&0==t&&(r=150);r<200;)0!=(r=Math.min(200,r+.5))&&(all0offset=!1),paths[t].setAttribute(\"stroke-dashoffset\",r),r=parseFloat(paths[t].getAttribute(\"stroke-dashoffset\")),await s(15)}async function r(t,e,r,i){let n=[];for(let o=t;o<e;o++)n.push(l(o,r,i)),await s(25);await Promise.all(n)}let i=document.getElementsByClassName(\"k\").length,n=paths.length/i;ellipses.length;let o=[];for(let h=0;h<i;h++)o.push([h*n,(h+1)*n]);await Promise.all(o.map(async(t,e)=>{await s(1e3*e),await r(t[0],t[1],e,!0)})),await Promise.all(o.map(async(t,e)=>{await s(200*e),await r(t[0],t[1],e,!1)}));for(let $=0;$<ellipses.length;$++)ellipses[$].setAttribute(\"stroke-dashoffset\",200);currentlyRendering=!1};renderFlow(),document.body.addEventListener(\"click\",renderFlow,!0);</script>'\n        );\n    }\n}\n"},"lib/ERC721A/contracts/ERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"./IERC721A.sol\";\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    )\n        external\n        returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return interfaceId == 0x01ffc9a7 // ERC165 interface ID for ERC165.\n            || interfaceId == 0x80ac58cd // ERC165 interface ID for ERC721.\n            || interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256) public view virtual override returns (string memory) {\n        return \"\";\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr) {\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner) {\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n        }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex // If within bounds,\n            && _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    )\n        private\n        pure\n        returns (bool result)\n    {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) {\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] =\n                _packOwnershipData(to, _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked));\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    )\n        public\n        payable\n        virtual\n        override\n    {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0) {\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual { }\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual { }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    )\n        private\n        returns (bool)\n    {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] =\n                _packOwnershipData(to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0));\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, OnchainDinos with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for { let tokenId := add(startTokenId, 1) } iszero(eq(tokenId, end)) { tokenId := add(tokenId, 1) } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] =\n                _packOwnershipData(to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0));\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(address to, uint256 quantity, bytes memory _data) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, \"\");\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) {\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n            }\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(address from, address to, uint24 previousExtraData) internal view virtual returns (uint24) { }\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(address from, address to, uint256 prevOwnershipPacked) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 { } {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"},"src/NFTEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\ninterface NFTEventsAndErrors {\n    error MaxSupplyReached();\n    error IncorrectPayment();\n    error AllowListMintCapPerWalletExceeded();\n    error AllowListMintCapExceeded();\n    error PublicMintNotEnabled();\n}\n"},"src/utils/Utils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nimport { LibPRNG } from \"./LibPRNG.sol\";\nimport { LibString } from \"./LibString.sol\";\n\nlibrary Utils {\n    using LibPRNG for LibPRNG.PRNG;\n    using LibString for uint256;\n\n    string internal constant _BASE64_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function formatTokenURI(\n        uint256 _tokenId,\n        string memory _imageURI,\n        string memory _animationURI,\n        string memory _properties\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\n            \"data:application/json;base64,\",\n            encodeBase64(\n                bytes(\n                    string.concat(\n                        '{\"name\":\"Onchain Steamboat Willie #',\n                        _tokenId.toString(),\n                        '\",\"description\":\"Onchain Steamboat Willies are generative onchain Steamboat Willies created to celebrate Steamboat Willie entering the public domain. Tap for party mode.\",\"attributes\":',\n                        _properties,\n                        ',\"image\":\"',\n                        _imageURI,\n                        '\",\"animation_url\":\"',\n                        _animationURI,\n                        '\"}'\n                    )\n                )\n            )\n        );\n    }\n\n    function getTrait(\n        string memory traitType,\n        string memory value,\n        bool isNumberValue,\n        bool includeTrailingComma\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\n            '{\"trait_type\":\"',\n            traitType,\n            '\",\"value\":',\n            isNumberValue ? value : string.concat('\"', value, '\"'),\n            \"}\",\n            includeTrailingComma ? \",\" : \"\"\n        );\n    }\n\n    // Encode some bytes in base64\n    // https://gist.github.com/mbvissers/8ba9ac1eca9ed0ef6973bd49b3c999ba\n    function encodeBase64(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = _BASE64_TABLE;\n\n        unchecked {\n            // multiply by 4/3 rounded up\n            uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n            // add some extra buffer at the end required for the writing\n            string memory result = new string(encodedLen + 32);\n\n            assembly {\n                // set the actual output length\n                mstore(result, encodedLen)\n\n                // prepare the lookup table\n                let tablePtr := add(table, 1)\n\n                // input ptr\n                let dataPtr := data\n                let endPtr := add(dataPtr, mload(data))\n\n                // result ptr, jump over length\n                let resultPtr := add(result, 32)\n\n                // run over the input, 3 bytes at a time\n                for { } lt(dataPtr, endPtr) { } {\n                    dataPtr := add(dataPtr, 3)\n\n                    // read 3 bytes\n                    let input := mload(dataPtr)\n\n                    // write 4 characters\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                    mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\n                    resultPtr := add(resultPtr, 1)\n                }\n\n                // padding with '='\n                switch mod(mload(data), 3)\n                case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n                case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n            }\n\n            return result;\n        }\n    }\n}\n"},"src/utils/Constants.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\ncontract Constants {\n    uint256 public constant PRICE = 0.005 ether;\n    // Use 1200 as max supply for onchain steamboat willie testing purposes\n    uint256 internal constant MAX_SUPPLY = 1300; //1111;\n    address payable internal constant _VAULT_ADDRESS = payable(address(0x39Ab90066cec746A032D67e4fe3378f16294CF6b));\n}\n"},"src/LibPRNG.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for generating psuedorandom numbers.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibPRNG.sol)\nlibrary LibPRNG {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STRUCTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev A psuedorandom number state in memory.\n    struct PRNG {\n        uint256 state;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         OPERATIONS                         */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Seeds the `prng` with `state`.\n    function seed(PRNG memory prng, bytes32 state) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(prng, state)\n        }\n    }\n\n    /// @dev Returns a psuedorandom uint256, uniformly distributed\n    /// between 0 (inclusive) and `upper` (exclusive).\n    /// If your modulus is big, this method is recommended\n    /// for uniform sampling to avoid modulo bias.\n    /// For uniform sampling across all uint256 values,\n    /// or for small enough moduli such that the bias is neligible,\n    /// use {next} instead.\n    function uniform(\n        PRNG memory prng,\n        uint256 upper\n    ) internal pure returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // prettier-ignore\n            for {} 1 {} {\n                result := keccak256(prng, 0x20)\n                mstore(prng, result)\n                // prettier-ignore\n                if iszero(lt(result, mod(sub(0, upper), upper))) { break }\n            }\n            result := mod(result, upper)\n        }\n    }\n}\n"},"src/utils/SVG.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17 .0;\n\nlibrary SVG {\n    /* MAIN ELEMENTS */\n\n    function line(string memory _props) internal pure returns (string memory) {\n        return string.concat(\"<line \", _props, \"/>\");\n    }\n\n    function rect(string memory _props) internal pure returns (string memory) {\n        return string.concat('<rect height=\"1\" width=\"1\" ', _props, \"/>\");\n    }\n\n    /* COMMON */\n\n    // an SVG attribute\n    function prop(string memory _key, string memory _val) internal pure returns (string memory) {\n        return string.concat(_key, \"=\", '\"', _val, '\" ');\n    }\n}\n"},"src/utils/AllowList.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\nimport { TwoStepOwnable } from \"./TwoStepOwnable.sol\";\n\n/**\n * @notice Smart contract that verifies and tracks allow list redemptions against a configurable Merkle root, up to a\n * max number configured at deploy\n */\ncontract AllowList is TwoStepOwnable {\n    bytes32 public merkleRoot;\n\n    error NotAllowListed();\n\n    ///@notice Checks if msg.sender is included in AllowList, revert otherwise\n    ///@param proof Merkle proof\n    modifier onlyAllowListed(bytes32[] calldata proof) {\n        if (!isAllowListed(proof, msg.sender)) {\n            revert NotAllowListed();\n        }\n        _;\n    }\n\n    constructor(bytes32 _merkleRoot) {\n        merkleRoot = _merkleRoot;\n    }\n\n    ///@notice set the Merkle root in the contract. OnlyOwner.\n    ///@param _merkleRoot the new Merkle root\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    ///@notice Given a Merkle proof, check if an address is AllowListed against the root\n    ///@param proof Merkle proof\n    ///@param data abi-encoded data to be checked against the root\n    ///@return boolean isAllowListed\n    function isAllowListed(bytes32[] calldata proof, bytes memory data) public view returns (bool) {\n        return verifyCalldata(proof, merkleRoot, keccak256(data));\n    }\n\n    ///@notice Given a Merkle proof, check if an address is AllowListed against the root\n    ///@param proof Merkle proof\n    ///@param addr address to check against allow list\n    ///@return boolean isAllowListed\n    function isAllowListed(bytes32[] calldata proof, address addr) public view returns (bool) {\n        return verifyCalldata(proof, merkleRoot, keccak256(abi.encodePacked(addr)));\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     * Copied from OpenZeppelin's MerkleProof.sol\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     * Copied from OpenZeppelin's MerkleProof.sol\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length;) {\n            computedHash = _hashPair(computedHash, proof[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return computedHash;\n    }\n\n    /// @dev Copied from OpenZeppelin's MerkleProof.sol\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /// @dev Copied from OpenZeppelin's MerkleProof.sol\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"lib/solady/src/utils/SSTORE2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Read and write to persistent storage at a fraction of the cost.\n/// @author Solady (https://github.com/vectorized/solmady/blob/main/src/utils/SSTORE2.sol)\n/// @author Saw-mon-and-Natalie (https://github.com/Saw-mon-and-Natalie)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SSTORE2.sol)\n/// @author Modified from 0xSequence (https://github.com/0xSequence/sstore2/blob/master/contracts/SSTORE2.sol)\nlibrary SSTORE2 {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev We skip the first byte as it's a STOP opcode,\n    /// which ensures the contract can't be called.\n    uint256 internal constant DATA_OFFSET = 1;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                        CUSTOM ERRORS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Unable to deploy the storage contract.\n    error DeploymentFailed();\n\n    /// @dev The storage contract address is invalid.\n    error InvalidPointer();\n\n    /// @dev Attempt to read outside of the storage contract's bytecode bounds.\n    error ReadOutOfBounds();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         WRITE LOGIC                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Writes `data` into the bytecode of a storage contract and returns its address.\n    function write(bytes memory data) internal returns (address pointer) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let originalDataLength := mload(data)\n\n            // Add 1 to data size since we are prefixing it with a STOP opcode.\n            let dataSize := add(originalDataLength, DATA_OFFSET)\n\n            /**\n             * ------------------------------------------------------------------------------+\n             * Opcode      | Mnemonic        | Stack                   | Memory              |\n             * ------------------------------------------------------------------------------|\n             * 61 codeSize | PUSH2 codeSize  | codeSize                |                     |\n             * 80          | DUP1            | codeSize codeSize       |                     |\n             * 60 0xa      | PUSH1 0xa       | 0xa codeSize codeSize   |                     |\n             * 3D          | RETURNDATASIZE  | 0 0xa codeSize codeSize |                     |\n             * 39          | CODECOPY        | codeSize                | [0..codeSize): code |\n             * 3D          | RETURNDATASIZE  | 0 codeSize              | [0..codeSize): code |\n             * F3          | RETURN          |                         | [0..codeSize): code |\n             * 00          | STOP            |                         |                     |\n             * ------------------------------------------------------------------------------+\n             * @dev Prefix the bytecode with a STOP opcode to ensure it cannot be called.\n             * Also PUSH2 is used since max contract size cap is 24,576 bytes which is less than 2 ** 16.\n             */\n            mstore(\n                data,\n                or(\n                    0x61000080600a3d393df300,\n                    // Left shift `dataSize` by 64 so that it lines up with the 0000 after PUSH2.\n                    shl(0x40, dataSize)\n                )\n            )\n\n            // Deploy a new contract with the generated creation code.\n            pointer := create(0, add(data, 0x15), add(dataSize, 0xa))\n\n            // If `pointer` is zero, revert.\n            if iszero(pointer) {\n                // Store the function selector of `DeploymentFailed()`.\n                mstore(0x00, 0x30116425)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            // Restore original length of the variable size `data`.\n            mstore(data, originalDataLength)\n        }\n    }\n\n    /// @dev Writes `data` into the bytecode of a storage contract with `salt`\n    /// and returns its deterministic address.\n    function writeDeterministic(bytes memory data, bytes32 salt)\n        internal\n        returns (address pointer)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let originalDataLength := mload(data)\n            let dataSize := add(originalDataLength, DATA_OFFSET)\n\n            mstore(data, or(0x61000080600a3d393df300, shl(0x40, dataSize)))\n\n            // Deploy a new contract with the generated creation code.\n            pointer := create2(0, add(data, 0x15), add(dataSize, 0xa), salt)\n\n            // If `pointer` is zero, revert.\n            if iszero(pointer) {\n                // Store the function selector of `DeploymentFailed()`.\n                mstore(0x00, 0x30116425)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            // Restore original length of the variable size `data`.\n            mstore(data, originalDataLength)\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the storage contract for `data`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHash(bytes memory data) internal pure returns (bytes32 hash) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let originalDataLength := mload(data)\n            let dataSize := add(originalDataLength, DATA_OFFSET)\n\n            mstore(data, or(0x61000080600a3d393df300, shl(0x40, dataSize)))\n\n            hash := keccak256(add(data, 0x15), add(dataSize, 0xa))\n\n            // Restore original length of the variable size `data`.\n            mstore(data, originalDataLength)\n        }\n    }\n\n    /// @dev Returns the address of the storage contract for `data`\n    /// deployed with `salt` by `deployer`.\n    function predictDeterministicAddress(bytes memory data, bytes32 salt, address deployer)\n        internal\n        pure\n        returns (address predicted)\n    {\n        bytes32 hash = initCodeHash(data);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and store the bytecode hash.\n            mstore8(0x00, 0xff) // Write the prefix.\n            mstore(0x35, hash)\n            mstore(0x01, shl(96, deployer))\n            mstore(0x15, salt)\n            predicted := keccak256(0x00, 0x55)\n            // Restore the part of the free memory pointer that has been overwritten.\n            mstore(0x35, 0)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         READ LOGIC                         */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns all the `data` from the bytecode of the storage contract at `pointer`.\n    function read(address pointer) internal view returns (bytes memory data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let pointerCodesize := extcodesize(pointer)\n            if iszero(pointerCodesize) {\n                // Store the function selector of `InvalidPointer()`.\n                mstore(0x00, 0x11052bb4)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Offset all indices by 1 to skip the STOP opcode.\n            let size := sub(pointerCodesize, DATA_OFFSET)\n\n            // Get the pointer to the free memory and allocate\n            // enough 32-byte words for the data and the length of the data,\n            // then copy the code to the allocated memory.\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\n            data := mload(0x40)\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\n            mstore(data, size)\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\n            extcodecopy(pointer, add(data, 0x20), DATA_OFFSET, size)\n        }\n    }\n\n    /// @dev Returns the `data` from the bytecode of the storage contract at `pointer`,\n    /// from the byte at `start`, to the end of the data stored.\n    function read(address pointer, uint256 start) internal view returns (bytes memory data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let pointerCodesize := extcodesize(pointer)\n            if iszero(pointerCodesize) {\n                // Store the function selector of `InvalidPointer()`.\n                mstore(0x00, 0x11052bb4)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            // If `!(pointer.code.size > start)`, reverts.\n            // This also handles the case where `start + DATA_OFFSET` overflows.\n            if iszero(gt(pointerCodesize, start)) {\n                // Store the function selector of `ReadOutOfBounds()`.\n                mstore(0x00, 0x84eb0dd1)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            let size := sub(pointerCodesize, add(start, DATA_OFFSET))\n\n            // Get the pointer to the free memory and allocate\n            // enough 32-byte words for the data and the length of the data,\n            // then copy the code to the allocated memory.\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\n            data := mload(0x40)\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\n            mstore(data, size)\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\n            extcodecopy(pointer, add(data, 0x20), add(start, DATA_OFFSET), size)\n        }\n    }\n\n    /// @dev Returns the `data` from the bytecode of the storage contract at `pointer`,\n    /// from the byte at `start`, to the byte at `end` (exclusive) of the data stored.\n    function read(address pointer, uint256 start, uint256 end)\n        internal\n        view\n        returns (bytes memory data)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let pointerCodesize := extcodesize(pointer)\n            if iszero(pointerCodesize) {\n                // Store the function selector of `InvalidPointer()`.\n                mstore(0x00, 0x11052bb4)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            // If `!(pointer.code.size > end) || (start > end)`, revert.\n            // This also handles the cases where\n            // `end + DATA_OFFSET` or `start + DATA_OFFSET` overflows.\n            if iszero(\n                and(\n                    gt(pointerCodesize, end), // Within bounds.\n                    iszero(gt(start, end)) // Valid range.\n                )\n            ) {\n                // Store the function selector of `ReadOutOfBounds()`.\n                mstore(0x00, 0x84eb0dd1)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            let size := sub(end, start)\n\n            // Get the pointer to the free memory and allocate\n            // enough 32-byte words for the data and the length of the data,\n            // then copy the code to the allocated memory.\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\n            data := mload(0x40)\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\n            mstore(data, size)\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\n            extcodecopy(pointer, add(data, 0x20), add(start, DATA_OFFSET), size)\n        }\n    }\n}\n"},"lib/seadrop/src/ERC721ContractMetadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\nimport {ISeaDropTokenContractMetadata} from \"./interfaces/ISeaDropTokenContractMetadata.sol\";\n\nimport {ERC721A} from \"ERC721A/ERC721A.sol\";\n\nimport {TwoStepOwnable} from \"utility-contracts/TwoStepOwnable.sol\";\n\nimport {IERC2981} from \"openzeppelin-contracts/interfaces/IERC2981.sol\";\n\nimport {IERC165} from \"openzeppelin-contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title  ERC721ContractMetadata\n * @author James Wenzel (emo.eth)\n * @author Ryan Ghods (ralxz.eth)\n * @author Stephan Min (stephanm.eth)\n * @notice ERC721ContractMetadata is a token contract that extends ERC721A\n *         with additional metadata and ownership capabilities.\n */\ncontract ERC721ContractMetadata is ERC721A, TwoStepOwnable, ISeaDropTokenContractMetadata {\n    /// @notice Track the max supply.\n    uint256 _maxSupply;\n\n    /// @notice Track the base URI for token metadata.\n    string _tokenBaseURI;\n\n    /// @notice Track the contract URI for contract metadata.\n    string _contractURI;\n\n    /// @notice Track the provenance hash for guaranteeing metadata order\n    ///         for random reveals.\n    bytes32 _provenanceHash;\n\n    /// @notice Track the royalty info: address to receive royalties, and\n    ///         royalty basis points.\n    RoyaltyInfo _royaltyInfo;\n\n    /**\n     * @dev Reverts if the sender is not the owner or the contract itself.\n     *      This function is inlined instead of being a modifier\n     *      to save contract space from being inlined N times.\n     */\n    function _onlyOwnerOrSelf() internal view {\n        if (_cast(msg.sender == owner()) | _cast(msg.sender == address(this)) == 0) {\n            revert OnlyOwner();\n        }\n    }\n\n    /**\n     * @notice Deploy the token contract with its name and symbol.\n     */\n    constructor(string memory name, string memory symbol) ERC721A(name, symbol) {}\n\n    /**\n     * @notice Sets the base URI for the token metadata and emits an event.\n     *\n     * @param newBaseURI The new base URI to set.\n     */\n    function setBaseURI(string calldata newBaseURI) external override {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Set the new base URI.\n        _tokenBaseURI = newBaseURI;\n\n        // Emit an event with the update.\n        if (totalSupply() != 0) {\n            emit BatchMetadataUpdate(1, _nextTokenId() - 1);\n        }\n    }\n\n    /**\n     * @notice Sets the contract URI for contract metadata.\n     *\n     * @param newContractURI The new contract URI.\n     */\n    function setContractURI(string calldata newContractURI) external override {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Set the new contract URI.\n        _contractURI = newContractURI;\n\n        // Emit an event with the update.\n        emit ContractURIUpdated(newContractURI);\n    }\n\n    /**\n     * @notice Emit an event notifying metadata updates for\n     *         a range of token ids, according to EIP-4906.\n     *\n     * @param fromTokenId The start token id.\n     * @param toTokenId   The end token id.\n     */\n    function emitBatchMetadataUpdate(uint256 fromTokenId, uint256 toTokenId) external {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Emit an event with the update.\n        emit BatchMetadataUpdate(fromTokenId, toTokenId);\n    }\n\n    /**\n     * @notice Sets the max token supply and emits an event.\n     *\n     * @param newMaxSupply The new max supply to set.\n     */\n    function setMaxSupply(uint256 newMaxSupply) external {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Ensure the max supply does not exceed the maximum value of uint64.\n        if (newMaxSupply > 2 ** 64 - 1) {\n            revert CannotExceedMaxSupplyOfUint64(newMaxSupply);\n        }\n\n        // Set the new max supply.\n        _maxSupply = newMaxSupply;\n\n        // Emit an event with the update.\n        emit MaxSupplyUpdated(newMaxSupply);\n    }\n\n    /**\n     * @notice Sets the provenance hash and emits an event.\n     *\n     *         The provenance hash is used for random reveals, which\n     *         is a hash of the ordered metadata to show it has not been\n     *         modified after mint started.\n     *\n     *         This function will revert after the first item has been minted.\n     *\n     * @param newProvenanceHash The new provenance hash to set.\n     */\n    function setProvenanceHash(bytes32 newProvenanceHash) external {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Revert if any items have been minted.\n        if (_totalMinted() > 0) {\n            revert ProvenanceHashCannotBeSetAfterMintStarted();\n        }\n\n        // Keep track of the old provenance hash for emitting with the event.\n        bytes32 oldProvenanceHash = _provenanceHash;\n\n        // Set the new provenance hash.\n        _provenanceHash = newProvenanceHash;\n\n        // Emit an event with the update.\n        emit ProvenanceHashUpdated(oldProvenanceHash, newProvenanceHash);\n    }\n\n    /**\n     * @notice Sets the address and basis points for royalties.\n     *\n     * @param newInfo The struct to configure royalties.\n     */\n    function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external {\n        // Ensure the sender is only the owner or contract itself.\n        _onlyOwnerOrSelf();\n\n        // Revert if the new royalty address is the zero address.\n        if (newInfo.royaltyAddress == address(0)) {\n            revert RoyaltyAddressCannotBeZeroAddress();\n        }\n\n        // Revert if the new basis points is greater than 10_000.\n        if (newInfo.royaltyBps > 10_000) {\n            revert InvalidRoyaltyBasisPoints(newInfo.royaltyBps);\n        }\n\n        // Set the new royalty info.\n        _royaltyInfo = newInfo;\n\n        // Emit an event with the updated params.\n        emit RoyaltyInfoUpdated(newInfo.royaltyAddress, newInfo.royaltyBps);\n    }\n\n    /**\n     * @notice Returns the contract URI for contract metadata.\n     */\n    function contractURI() external view override returns (string memory) {\n        return _contractURI;\n    }\n\n    /**\n     * @notice Returns the base URI for token metadata.\n     */\n    function baseURI() external view virtual override returns (string memory) {\n        return _tokenBaseURI;\n    }\n\n    /**\n     * @notice Returns the max token supply.\n     */\n    function maxSupply() public view returns (uint256) {\n        return _maxSupply;\n    }\n\n    /**\n     * @notice Returns the provenance hash.\n     *         The provenance hash is used for random reveals, which\n     *         is a hash of the ordered metadata to show it is unmodified\n     *         after mint has started.\n     */\n    function provenanceHash() external view override returns (bytes32) {\n        return _provenanceHash;\n    }\n\n    /**\n     * @notice Returns the address that receives royalties.\n     */\n    function royaltyAddress() external view returns (address) {\n        return _royaltyInfo.royaltyAddress;\n    }\n\n    /**\n     * @notice Returns the royalty basis points out of 10_000.\n     */\n    function royaltyBasisPoints() external view returns (uint256) {\n        return _royaltyInfo.royaltyBps;\n    }\n\n    /**\n     * @notice Called with the sale price to determine how much royalty\n     *         is owed and to whom.\n     *\n     * @ param  _tokenId     The NFT asset queried for royalty information.\n     * @param  _salePrice    The sale price of the NFT asset specified by\n     *                       _tokenId.\n     *\n     * @return receiver      Address of who should be sent the royalty payment.\n     * @return royaltyAmount The royalty payment amount for _salePrice.\n     */\n    function royaltyInfo(uint256, /* _tokenId */ uint256 _salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        // Put the royalty info on the stack for more efficient access.\n        RoyaltyInfo storage info = _royaltyInfo;\n\n        // Set the royalty amount to the sale price times the royalty basis\n        // points divided by 10_000.\n        royaltyAmount = (_salePrice * info.royaltyBps) / 10_000;\n\n        // Set the receiver of the royalty.\n        receiver = info.royaltyAddress;\n    }\n\n    /**\n     * @notice Returns whether the interface is supported.\n     *\n     * @param interfaceId The interface id to check against.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721A) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || interfaceId == 0x49064906 // ERC-4906\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Internal pure function to cast a `bool` value to a `uint256` value.\n     *\n     * @param b The `bool` value to cast.\n     *\n     * @return u The `uint256` value.\n     */\n    function _cast(bool b) internal pure returns (uint256 u) {\n        assembly {\n            u := b\n        }\n    }\n}\n"},"lib/seadrop/src/interfaces/INonFungibleSeaDropToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\nimport {ISeaDropTokenContractMetadata} from \"./ISeaDropTokenContractMetadata.sol\";\n\nimport {AllowListData, PublicDrop, TokenGatedDropStage, SignedMintValidationParams} from \"../lib/SeaDropStructs.sol\";\n\ninterface INonFungibleSeaDropToken is ISeaDropTokenContractMetadata {\n    /**\n     * @dev Revert with an error if a contract is not an allowed\n     *      SeaDrop address.\n     */\n    error OnlyAllowedSeaDrop();\n\n    /**\n     * @dev Emit an event when allowed SeaDrop contracts are updated.\n     */\n    event AllowedSeaDropUpdated(address[] allowedSeaDrop);\n\n    /**\n     * @notice Update the allowed SeaDrop contracts.\n     *         Only the owner can use this function.\n     *\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\n     */\n    function updateAllowedSeaDrop(address[] calldata allowedSeaDrop) external;\n\n    /**\n     * @notice Mint tokens, restricted to the SeaDrop contract.\n     *\n     * @dev    NOTE: If a token registers itself with multiple SeaDrop\n     *         contracts, the implementation of this function should guard\n     *         against reentrancy. If the implementing token uses\n     *         _safeMint(), or a feeRecipient with a malicious receive() hook\n     *         is specified, the token or fee recipients may be able to execute\n     *         another mint in the same transaction via a separate SeaDrop\n     *         contract.\n     *         This is dangerous if an implementing token does not correctly\n     *         update the minterNumMinted and currentTotalSupply values before\n     *         transferring minted tokens, as SeaDrop references these values\n     *         to enforce token limits on a per-wallet and per-stage basis.\n     *\n     * @param minter   The address to mint to.\n     * @param quantity The number of tokens to mint.\n     */\n    function mintSeaDrop(address minter, uint256 quantity) external;\n\n    /**\n     * @notice Returns a set of mint stats for the address.\n     *         This assists SeaDrop in enforcing maxSupply,\n     *         maxTotalMintableByWallet, and maxTokenSupplyForStage checks.\n     *\n     * @dev    NOTE: Implementing contracts should always update these numbers\n     *         before transferring any tokens with _safeMint() to mitigate\n     *         consequences of malicious onERC721Received() hooks.\n     *\n     * @param minter The minter address.\n     */\n    function getMintStats(address minter)\n        external\n        view\n        returns (uint256 minterNumMinted, uint256 currentTotalSupply, uint256 maxSupply);\n\n    /**\n     * @notice Update the public drop data for this nft contract on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param publicDrop  The public drop data.\n     */\n    function updatePublicDrop(address seaDropImpl, PublicDrop calldata publicDrop) external;\n\n    /**\n     * @notice Update the allow list data for this nft contract on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl   The allowed SeaDrop contract.\n     * @param allowListData The allow list data.\n     */\n    function updateAllowList(address seaDropImpl, AllowListData calldata allowListData) external;\n\n    /**\n     * @notice Update the token gated drop stage data for this nft contract\n     *         on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\n     *         simultaneous token gated drop promotions for each other,\n     *         they can be minted by the same actor until\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\n     *         `allowedNftToken` is not running an active drop during the\n     *         `dropStage` time period.\n     *\n     *\n     * @param seaDropImpl     The allowed SeaDrop contract.\n     * @param allowedNftToken The allowed nft token.\n     * @param dropStage       The token gated drop stage data.\n     */\n    function updateTokenGatedDrop(address seaDropImpl, address allowedNftToken, TokenGatedDropStage calldata dropStage)\n        external;\n\n    /**\n     * @notice Update the drop URI for this nft contract on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param dropURI     The new drop URI.\n     */\n    function updateDropURI(address seaDropImpl, string calldata dropURI) external;\n\n    /**\n     * @notice Update the creator payout address for this nft contract on\n     *         SeaDrop.\n     *         Only the owner can set the creator payout address.\n     *\n     * @param seaDropImpl   The allowed SeaDrop contract.\n     * @param payoutAddress The new payout address.\n     */\n    function updateCreatorPayoutAddress(address seaDropImpl, address payoutAddress) external;\n\n    /**\n     * @notice Update the allowed fee recipient for this nft contract\n     *         on SeaDrop.\n     *\n     * @param seaDropImpl  The allowed SeaDrop contract.\n     * @param feeRecipient The new fee recipient.\n     */\n    function updateAllowedFeeRecipient(address seaDropImpl, address feeRecipient, bool allowed) external;\n\n    /**\n     * @notice Update the server-side signers for this nft contract\n     *         on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl                The allowed SeaDrop contract.\n     * @param signer                     The signer to update.\n     * @param signedMintValidationParams Minimum and maximum parameters\n     *                                   to enforce for signed mints.\n     */\n    function updateSignedMintValidationParams(\n        address seaDropImpl,\n        address signer,\n        SignedMintValidationParams memory signedMintValidationParams\n    ) external;\n\n    /**\n     * @notice Update the allowed payers for this nft contract on SeaDrop.\n     *         Only the owner can use this function.\n     *\n     * @param seaDropImpl The allowed SeaDrop contract.\n     * @param payer       The payer to update.\n     * @param allowed     Whether the payer is allowed.\n     */\n    function updatePayer(address seaDropImpl, address payer, bool allowed) external;\n}\n"},"lib/seadrop/src/interfaces/ISeaDrop.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\nimport {\n    AllowListData,\n    MintParams,\n    PublicDrop,\n    TokenGatedDropStage,\n    TokenGatedMintParams,\n    SignedMintValidationParams\n} from \"../lib/SeaDropStructs.sol\";\n\nimport {SeaDropErrorsAndEvents} from \"../lib/SeaDropErrorsAndEvents.sol\";\n\ninterface ISeaDrop is SeaDropErrorsAndEvents {\n    /**\n     * @notice Mint a public drop.\n     *\n     * @param nftContract      The nft contract to mint.\n     * @param feeRecipient     The fee recipient.\n     * @param minterIfNotPayer The mint recipient if different than the payer.\n     * @param quantity         The number of tokens to mint.\n     */\n    function mintPublic(address nftContract, address feeRecipient, address minterIfNotPayer, uint256 quantity)\n        external\n        payable;\n\n    /**\n     * @notice Mint from an allow list.\n     *\n     * @param nftContract      The nft contract to mint.\n     * @param feeRecipient     The fee recipient.\n     * @param minterIfNotPayer The mint recipient if different than the payer.\n     * @param quantity         The number of tokens to mint.\n     * @param mintParams       The mint parameters.\n     * @param proof            The proof for the leaf of the allow list.\n     */\n    function mintAllowList(\n        address nftContract,\n        address feeRecipient,\n        address minterIfNotPayer,\n        uint256 quantity,\n        MintParams calldata mintParams,\n        bytes32[] calldata proof\n    ) external payable;\n\n    /**\n     * @notice Mint with a server-side signature.\n     *         Note that a signature can only be used once.\n     *\n     * @param nftContract      The nft contract to mint.\n     * @param feeRecipient     The fee recipient.\n     * @param minterIfNotPayer The mint recipient if different than the payer.\n     * @param quantity         The number of tokens to mint.\n     * @param mintParams       The mint parameters.\n     * @param salt             The sale for the signed mint.\n     * @param signature        The server-side signature, must be an allowed\n     *                         signer.\n     */\n    function mintSigned(\n        address nftContract,\n        address feeRecipient,\n        address minterIfNotPayer,\n        uint256 quantity,\n        MintParams calldata mintParams,\n        uint256 salt,\n        bytes calldata signature\n    ) external payable;\n\n    /**\n     * @notice Mint as an allowed token holder.\n     *         This will mark the token id as redeemed and will revert if the\n     *         same token id is attempted to be redeemed twice.\n     *\n     * @param nftContract      The nft contract to mint.\n     * @param feeRecipient     The fee recipient.\n     * @param minterIfNotPayer The mint recipient if different than the payer.\n     * @param mintParams       The token gated mint params.\n     */\n    function mintAllowedTokenHolder(\n        address nftContract,\n        address feeRecipient,\n        address minterIfNotPayer,\n        TokenGatedMintParams calldata mintParams\n    ) external payable;\n\n    /**\n     * @notice Emits an event to notify update of the drop URI.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param dropURI The new drop URI.\n     */\n    function updateDropURI(string calldata dropURI) external;\n\n    /**\n     * @notice Updates the public drop data for the nft contract\n     *         and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param publicDrop The public drop data.\n     */\n    function updatePublicDrop(PublicDrop calldata publicDrop) external;\n\n    /**\n     * @notice Updates the allow list merkle root for the nft contract\n     *         and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param allowListData The allow list data.\n     */\n    function updateAllowList(AllowListData calldata allowListData) external;\n\n    /**\n     * @notice Updates the token gated drop stage for the nft contract\n     *         and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\n     *         simultaneous token gated drop promotions for each other,\n     *         they can be minted by the same actor until\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\n     *         `allowedNftToken` is not running an active drop during\n     *         the `dropStage` time period.\n     *\n     * @param allowedNftToken The token gated nft token.\n     * @param dropStage       The token gated drop stage data.\n     */\n    function updateTokenGatedDrop(address allowedNftToken, TokenGatedDropStage calldata dropStage) external;\n\n    /**\n     * @notice Updates the creator payout address and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param payoutAddress The creator payout address.\n     */\n    function updateCreatorPayoutAddress(address payoutAddress) external;\n\n    /**\n     * @notice Updates the allowed fee recipient and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param feeRecipient The fee recipient.\n     * @param allowed      If the fee recipient is allowed.\n     */\n    function updateAllowedFeeRecipient(address feeRecipient, bool allowed) external;\n\n    /**\n     * @notice Updates the allowed server-side signers and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param signer                     The signer to update.\n     * @param signedMintValidationParams Minimum and maximum parameters\n     *                                   to enforce for signed mints.\n     */\n    function updateSignedMintValidationParams(\n        address signer,\n        SignedMintValidationParams calldata signedMintValidationParams\n    ) external;\n\n    /**\n     * @notice Updates the allowed payer and emits an event.\n     *\n     *         This method assume msg.sender is an nft contract and its\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\n     *\n     *         Note: Be sure only authorized users can call this from\n     *         token contracts that implement INonFungibleSeaDropToken.\n     *\n     * @param payer   The payer to add or remove.\n     * @param allowed Whether to add or remove the payer.\n     */\n    function updatePayer(address payer, bool allowed) external;\n\n    /**\n     * @notice Returns the public drop data for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getPublicDrop(address nftContract) external view returns (PublicDrop memory);\n\n    /**\n     * @notice Returns the creator payout address for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getCreatorPayoutAddress(address nftContract) external view returns (address);\n\n    /**\n     * @notice Returns the allow list merkle root for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getAllowListMerkleRoot(address nftContract) external view returns (bytes32);\n\n    /**\n     * @notice Returns if the specified fee recipient is allowed\n     *         for the nft contract.\n     *\n     * @param nftContract  The nft contract.\n     * @param feeRecipient The fee recipient.\n     */\n    function getFeeRecipientIsAllowed(address nftContract, address feeRecipient) external view returns (bool);\n\n    /**\n     * @notice Returns an enumeration of allowed fee recipients for an\n     *         nft contract when fee recipients are enforced\n     *\n     * @param nftContract The nft contract.\n     */\n    function getAllowedFeeRecipients(address nftContract) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the server-side signers for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getSigners(address nftContract) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the struct of SignedMintValidationParams for a signer.\n     *\n     * @param nftContract The nft contract.\n     * @param signer      The signer.\n     */\n    function getSignedMintValidationParams(address nftContract, address signer)\n        external\n        view\n        returns (SignedMintValidationParams memory);\n\n    /**\n     * @notice Returns the payers for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getPayers(address nftContract) external view returns (address[] memory);\n\n    /**\n     * @notice Returns if the specified payer is allowed\n     *         for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     * @param payer       The payer.\n     */\n    function getPayerIsAllowed(address nftContract, address payer) external view returns (bool);\n\n    /**\n     * @notice Returns the allowed token gated drop tokens for the nft contract.\n     *\n     * @param nftContract The nft contract.\n     */\n    function getTokenGatedAllowedTokens(address nftContract) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the token gated drop data for the nft contract\n     *         and token gated nft.\n     *\n     * @param nftContract     The nft contract.\n     * @param allowedNftToken The token gated nft token.\n     */\n    function getTokenGatedDrop(address nftContract, address allowedNftToken)\n        external\n        view\n        returns (TokenGatedDropStage memory);\n\n    /**\n     * @notice Returns whether the token id for a token gated drop has been\n     *         redeemed.\n     *\n     * @param nftContract       The nft contract.\n     * @param allowedNftToken   The token gated nft token.\n     * @param allowedNftTokenId The token gated nft token id to check.\n     */\n    function getAllowedNftTokenIdIsRedeemed(address nftContract, address allowedNftToken, uint256 allowedNftTokenId)\n        external\n        view\n        returns (bool);\n}\n"},"lib/seadrop/src/lib/SeaDropStructs.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\n/**\n * @notice A struct defining public drop data.\n *         Designed to fit efficiently in one storage slot.\n *\n * @param mintPrice                The mint price per token. (Up to 1.2m\n *                                 of native token, e.g. ETH, MATIC)\n * @param startTime                The start time, ensure this is not zero.\n * @param endTIme                  The end time, ensure this is not zero.\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\n *                                 allowed. (The limit for this field is\n *                                 2^16 - 1)\n * @param feeBps                   Fee out of 10_000 basis points to be\n *                                 collected.\n * @param restrictFeeRecipients    If false, allow any fee recipient;\n *                                 if true, check fee recipient is allowed.\n */\nstruct PublicDrop {\n    uint80 mintPrice; // 80/256 bits\n    uint48 startTime; // 128/256 bits\n    uint48 endTime; // 176/256 bits\n    uint16 maxTotalMintableByWallet; // 224/256 bits\n    uint16 feeBps; // 240/256 bits\n    bool restrictFeeRecipients; // 248/256 bits\n}\n\n/**\n * @notice A struct defining token gated drop stage data.\n *         Designed to fit efficiently in one storage slot.\n *\n * @param mintPrice                The mint price per token. (Up to 1.2m\n *                                 of native token, e.g.: ETH, MATIC)\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\n *                                 allowed. (The limit for this field is\n *                                 2^16 - 1)\n * @param startTime                The start time, ensure this is not zero.\n * @param endTime                  The end time, ensure this is not zero.\n * @param dropStageIndex           The drop stage index to emit with the event\n *                                 for analytical purposes. This should be\n *                                 non-zero since the public mint emits\n *                                 with index zero.\n * @param maxTokenSupplyForStage   The limit of token supply this stage can\n *                                 mint within. (The limit for this field is\n *                                 2^16 - 1)\n * @param feeBps                   Fee out of 10_000 basis points to be\n *                                 collected.\n * @param restrictFeeRecipients    If false, allow any fee recipient;\n *                                 if true, check fee recipient is allowed.\n */\nstruct TokenGatedDropStage {\n    uint80 mintPrice; // 80/256 bits\n    uint16 maxTotalMintableByWallet; // 96/256 bits\n    uint48 startTime; // 144/256 bits\n    uint48 endTime; // 192/256 bits\n    uint8 dropStageIndex; // non-zero. 200/256 bits\n    uint32 maxTokenSupplyForStage; // 232/256 bits\n    uint16 feeBps; // 248/256 bits\n    bool restrictFeeRecipients; // 256/256 bits\n}\n\n/**\n * @notice A struct defining mint params for an allow list.\n *         An allow list leaf will be composed of `msg.sender` and\n *         the following params.\n *\n *         Note: Since feeBps is encoded in the leaf, backend should ensure\n *         that feeBps is acceptable before generating a proof.\n *\n * @param mintPrice                The mint price per token.\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\n *                                 allowed.\n * @param startTime                The start time, ensure this is not zero.\n * @param endTime                  The end time, ensure this is not zero.\n * @param dropStageIndex           The drop stage index to emit with the event\n *                                 for analytical purposes. This should be\n *                                 non-zero since the public mint emits with\n *                                 index zero.\n * @param maxTokenSupplyForStage   The limit of token supply this stage can\n *                                 mint within.\n * @param feeBps                   Fee out of 10_000 basis points to be\n *                                 collected.\n * @param restrictFeeRecipients    If false, allow any fee recipient;\n *                                 if true, check fee recipient is allowed.\n */\nstruct MintParams {\n    uint256 mintPrice;\n    uint256 maxTotalMintableByWallet;\n    uint256 startTime;\n    uint256 endTime;\n    uint256 dropStageIndex; // non-zero\n    uint256 maxTokenSupplyForStage;\n    uint256 feeBps;\n    bool restrictFeeRecipients;\n}\n\n/**\n * @notice A struct defining token gated mint params.\n *\n * @param allowedNftToken    The allowed nft token contract address.\n * @param allowedNftTokenIds The token ids to redeem.\n */\nstruct TokenGatedMintParams {\n    address allowedNftToken;\n    uint256[] allowedNftTokenIds;\n}\n\n/**\n * @notice A struct defining allow list data (for minting an allow list).\n *\n * @param merkleRoot    The merkle root for the allow list.\n * @param publicKeyURIs If the allowListURI is encrypted, a list of URIs\n *                      pointing to the public keys. Empty if unencrypted.\n * @param allowListURI  The URI for the allow list.\n */\nstruct AllowListData {\n    bytes32 merkleRoot;\n    string[] publicKeyURIs;\n    string allowListURI;\n}\n\n/**\n * @notice A struct defining minimum and maximum parameters to validate for\n *         signed mints, to minimize negative effects of a compromised signer.\n *\n * @param minMintPrice                The minimum mint price allowed.\n * @param maxMaxTotalMintableByWallet The maximum total number of mints allowed\n *                                    by a wallet.\n * @param minStartTime                The minimum start time allowed.\n * @param maxEndTime                  The maximum end time allowed.\n * @param maxMaxTokenSupplyForStage   The maximum token supply allowed.\n * @param minFeeBps                   The minimum fee allowed.\n * @param maxFeeBps                   The maximum fee allowed.\n */\nstruct SignedMintValidationParams {\n    uint80 minMintPrice; // 80/256 bits\n    uint24 maxMaxTotalMintableByWallet; // 104/256 bits\n    uint40 minStartTime; // 144/256 bits\n    uint40 maxEndTime; // 184/256 bits\n    uint40 maxMaxTokenSupplyForStage; // 224/256 bits\n    uint16 minFeeBps; // 240/256 bits\n    uint16 maxFeeBps; // 256/256 bits\n}\n"},"lib/seadrop/src/lib/ERC721SeaDropStructsErrorsAndEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\nimport {AllowListData, PublicDrop, SignedMintValidationParams, TokenGatedDropStage} from \"./SeaDropStructs.sol\";\n\ninterface ERC721SeaDropStructsErrorsAndEvents {\n    /**\n     * @notice Revert with an error if mint exceeds the max supply.\n     */\n    error MintQuantityExceedsMaxSupply(uint256 total, uint256 maxSupply);\n\n    /**\n     * @notice Revert with an error if the number of token gated\n     *         allowedNftTokens doesn't match the length of supplied\n     *         drop stages.\n     */\n    error TokenGatedMismatch();\n\n    /**\n     *  @notice Revert with an error if the number of signers doesn't match\n     *          the length of supplied signedMintValidationParams\n     */\n    error SignersMismatch();\n\n    /**\n     * @notice An event to signify that a SeaDrop token contract was deployed.\n     */\n    event SeaDropTokenDeployed();\n\n    /**\n     * @notice A struct to configure multiple contract options at a time.\n     */\n    struct MultiConfigureStruct {\n        uint256 maxSupply;\n        string baseURI;\n        string contractURI;\n        address seaDropImpl;\n        PublicDrop publicDrop;\n        string dropURI;\n        AllowListData allowListData;\n        address creatorPayoutAddress;\n        bytes32 provenanceHash;\n        address[] allowedFeeRecipients;\n        address[] disallowedFeeRecipients;\n        address[] allowedPayers;\n        address[] disallowedPayers;\n        // Token-gated\n        address[] tokenGatedAllowedNftTokens;\n        TokenGatedDropStage[] tokenGatedDropStages;\n        address[] disallowedTokenGatedAllowedNftTokens;\n        // Server-signed\n        address[] signers;\n        SignedMintValidationParams[] signedMintValidationParams;\n        address[] disallowedSigners;\n    }\n}\n"},"lib/solady/lib/solmate/src/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private locked = 1;\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/ERC721A/contracts/IERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"},"src/utils/LibPRNG.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for generating psuedorandom numbers.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibPRNG.sol)\nlibrary LibPRNG {\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                          STRUCTS                           */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev A psuedorandom number state in memory.\n  struct PRNG {\n    uint256 state;\n  }\n\n  /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n  /*                         OPERATIONS                         */\n  /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n  /// @dev Seeds the `prng` with `state`.\n  function seed(PRNG memory prng, bytes32 state) internal pure {\n    /// @solidity memory-safe-assembly\n    assembly {\n      mstore(prng, state)\n    }\n  }\n\n  /// @dev Returns a psuedorandom uint256, uniformly distributed\n  /// between 0 (inclusive) and `upper` (exclusive).\n  /// If your modulus is big, this method is recommended\n  /// for uniform sampling to avoid modulo bias.\n  /// For uniform sampling across all uint256 values,\n  /// or for small enough moduli such that the bias is neligible,\n  /// use {next} instead.\n  function uniform(PRNG memory prng, uint256 upper) internal pure returns (uint256 result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // prettier-ignore\n      for {} 1 {} {\n                result := keccak256(prng, 0x20)\n                mstore(prng, result)\n                // prettier-ignore\n                if iszero(lt(result, mod(sub(0, upper), upper))) { break }\n            }\n      result := mod(result, upper)\n    }\n  }\n}\n"},"src/utils/TwoStepOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * @notice A two-step extension of Ownable, where the new owner must claim ownership of the contract after owner\n * initiates transfer\n * Owner can cancel the transfer at any point before the new owner claims ownership.\n * Helpful in guarding against transferring ownership to an address that is unable to act as the Owner.\n */\nabstract contract TwoStepOwnable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    address internal potentialOwner;\n\n    event PotentialOwnerUpdated(address newPotentialAdministrator);\n\n    error NewOwnerIsZeroAddress();\n    error NotNextOwner();\n    error OnlyOwner();\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    constructor() {\n        _transferOwnership(msg.sender);\n    }\n\n    ///@notice Initiate ownership transfer to newPotentialOwner. Note: new owner will have to manually acceptOwnership\n    ///@param newPotentialOwner address of potential new owner\n    function transferOwnership(address newPotentialOwner) public virtual onlyOwner {\n        if (newPotentialOwner == address(0)) {\n            revert NewOwnerIsZeroAddress();\n        }\n        potentialOwner = newPotentialOwner;\n        emit PotentialOwnerUpdated(newPotentialOwner);\n    }\n\n    ///@notice Claim ownership of smart contract, after the current owner has initiated the process with\n    /// transferOwnership\n    function acceptOwnership() public virtual {\n        address _potentialOwner = potentialOwner;\n        if (msg.sender != _potentialOwner) {\n            revert NotNextOwner();\n        }\n        delete potentialOwner;\n        emit PotentialOwnerUpdated(address(0));\n        _transferOwnership(_potentialOwner);\n    }\n\n    ///@notice cancel ownership transfer\n    function cancelOwnershipTransfer() public virtual onlyOwner {\n        delete potentialOwner;\n        emit PotentialOwnerUpdated(address(0));\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (_owner != msg.sender) {\n            revert OnlyOwner();\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"lib/seadrop/src/interfaces/ISeaDropTokenContractMetadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\nimport {IERC2981} from \"openzeppelin-contracts/interfaces/IERC2981.sol\";\n\ninterface ISeaDropTokenContractMetadata is IERC2981 {\n    /**\n     * @notice Throw if the max supply exceeds uint64, a limit\n     *         due to the storage of bit-packed variables in ERC721A.\n     */\n    error CannotExceedMaxSupplyOfUint64(uint256 newMaxSupply);\n\n    /**\n     * @dev Revert with an error when attempting to set the provenance\n     *      hash after the mint has started.\n     */\n    error ProvenanceHashCannotBeSetAfterMintStarted();\n\n    /**\n     * @dev Revert if the royalty basis points is greater than 10_000.\n     */\n    error InvalidRoyaltyBasisPoints(uint256 basisPoints);\n\n    /**\n     * @dev Revert if the royalty address is being set to the zero address.\n     */\n    error RoyaltyAddressCannotBeZeroAddress();\n\n    /**\n     * @dev Emit an event for token metadata reveals/updates,\n     *      according to EIP-4906.\n     *\n     * @param _fromTokenId The start token id.\n     * @param _toTokenId   The end token id.\n     */\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n\n    /**\n     * @dev Emit an event when the URI for the collection-level metadata\n     *      is updated.\n     */\n    event ContractURIUpdated(string newContractURI);\n\n    /**\n     * @dev Emit an event when the max token supply is updated.\n     */\n    event MaxSupplyUpdated(uint256 newMaxSupply);\n\n    /**\n     * @dev Emit an event with the previous and new provenance hash after\n     *      being updated.\n     */\n    event ProvenanceHashUpdated(bytes32 previousHash, bytes32 newHash);\n\n    /**\n     * @dev Emit an event when the royalties info is updated.\n     */\n    event RoyaltyInfoUpdated(address receiver, uint256 bps);\n\n    /**\n     * @notice A struct defining royalty info for the contract.\n     */\n    struct RoyaltyInfo {\n        address royaltyAddress;\n        uint96 royaltyBps;\n    }\n\n    /**\n     * @notice Sets the base URI for the token metadata and emits an event.\n     *\n     * @param tokenURI The new base URI to set.\n     */\n    function setBaseURI(string calldata tokenURI) external;\n\n    /**\n     * @notice Sets the contract URI for contract metadata.\n     *\n     * @param newContractURI The new contract URI.\n     */\n    function setContractURI(string calldata newContractURI) external;\n\n    /**\n     * @notice Sets the max supply and emits an event.\n     *\n     * @param newMaxSupply The new max supply to set.\n     */\n    function setMaxSupply(uint256 newMaxSupply) external;\n\n    /**\n     * @notice Sets the provenance hash and emits an event.\n     *\n     *         The provenance hash is used for random reveals, which\n     *         is a hash of the ordered metadata to show it has not been\n     *         modified after mint started.\n     *\n     *         This function will revert after the first item has been minted.\n     *\n     * @param newProvenanceHash The new provenance hash to set.\n     */\n    function setProvenanceHash(bytes32 newProvenanceHash) external;\n\n    /**\n     * @notice Sets the address and basis points for royalties.\n     *\n     * @param newInfo The struct to configure royalties.\n     */\n    function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external;\n\n    /**\n     * @notice Returns the base URI for token metadata.\n     */\n    function baseURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the contract URI.\n     */\n    function contractURI() external view returns (string memory);\n\n    /**\n     * @notice Returns the max token supply.\n     */\n    function maxSupply() external view returns (uint256);\n\n    /**\n     * @notice Returns the provenance hash.\n     *         The provenance hash is used for random reveals, which\n     *         is a hash of the ordered metadata to show it is unmodified\n     *         after mint has started.\n     */\n    function provenanceHash() external view returns (bytes32);\n\n    /**\n     * @notice Returns the address that receives royalties.\n     */\n    function royaltyAddress() external view returns (address);\n\n    /**\n     * @notice Returns the royalty basis points out of 10_000.\n     */\n    function royaltyBasisPoints() external view returns (uint256);\n}\n"},"lib/utility-contracts/src/TwoStepOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport {ConstructorInitializable} from \"./ConstructorInitializable.sol\";\n\n/**\n@notice A two-step extension of Ownable, where the new owner must claim ownership of the contract after owner initiates transfer\nOwner can cancel the transfer at any point before the new owner claims ownership.\nHelpful in guarding against transferring ownership to an address that is unable to act as the Owner.\n*/\nabstract contract TwoStepOwnable is ConstructorInitializable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    address internal potentialOwner;\n\n    event PotentialOwnerUpdated(address newPotentialAdministrator);\n\n    error NewOwnerIsZeroAddress();\n    error NotNextOwner();\n    error OnlyOwner();\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    constructor() {\n        _initialize();\n    }\n\n    function _initialize() private onlyConstructor {\n        _transferOwnership(msg.sender);\n    }\n\n    ///@notice Initiate ownership transfer to newPotentialOwner. Note: new owner will have to manually acceptOwnership\n    ///@param newPotentialOwner address of potential new owner\n    function transferOwnership(address newPotentialOwner)\n        public\n        virtual\n        onlyOwner\n    {\n        if (newPotentialOwner == address(0)) {\n            revert NewOwnerIsZeroAddress();\n        }\n        potentialOwner = newPotentialOwner;\n        emit PotentialOwnerUpdated(newPotentialOwner);\n    }\n\n    ///@notice Claim ownership of smart contract, after the current owner has initiated the process with transferOwnership\n    function acceptOwnership() public virtual {\n        address _potentialOwner = potentialOwner;\n        if (msg.sender != _potentialOwner) {\n            revert NotNextOwner();\n        }\n        delete potentialOwner;\n        emit PotentialOwnerUpdated(address(0));\n        _transferOwnership(_potentialOwner);\n    }\n\n    ///@notice cancel ownership transfer\n    function cancelOwnershipTransfer() public virtual onlyOwner {\n        delete potentialOwner;\n        emit PotentialOwnerUpdated(address(0));\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (_owner != msg.sender) {\n            revert OnlyOwner();\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"},"lib/seadrop/src/lib/SeaDropErrorsAndEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17.0;\n\nimport {PublicDrop, TokenGatedDropStage, SignedMintValidationParams} from \"./SeaDropStructs.sol\";\n\ninterface SeaDropErrorsAndEvents {\n    /**\n     * @dev Revert with an error if the drop stage is not active.\n     */\n    error NotActive(uint256 currentTimestamp, uint256 startTimestamp, uint256 endTimestamp);\n\n    /**\n     * @dev Revert with an error if the mint quantity is zero.\n     */\n    error MintQuantityCannotBeZero();\n\n    /**\n     * @dev Revert with an error if the mint quantity exceeds the max allowed\n     *      to be minted per wallet.\n     */\n    error MintQuantityExceedsMaxMintedPerWallet(uint256 total, uint256 allowed);\n\n    /**\n     * @dev Revert with an error if the mint quantity exceeds the max token\n     *      supply.\n     */\n    error MintQuantityExceedsMaxSupply(uint256 total, uint256 maxSupply);\n\n    /**\n     * @dev Revert with an error if the mint quantity exceeds the max token\n     *      supply for the stage.\n     *      Note: The `maxTokenSupplyForStage` for public mint is\n     *      always `type(uint).max`.\n     */\n    error MintQuantityExceedsMaxTokenSupplyForStage(uint256 total, uint256 maxTokenSupplyForStage);\n\n    /**\n     * @dev Revert if the fee recipient is the zero address.\n     */\n    error FeeRecipientCannotBeZeroAddress();\n\n    /**\n     * @dev Revert if the fee recipient is not already included.\n     */\n    error FeeRecipientNotPresent();\n\n    /**\n     * @dev Revert if the fee basis points is greater than 10_000.\n     */\n    error InvalidFeeBps(uint256 feeBps);\n\n    /**\n     * @dev Revert if the fee recipient is already included.\n     */\n    error DuplicateFeeRecipient();\n\n    /**\n     * @dev Revert if the fee recipient is restricted and not allowed.\n     */\n    error FeeRecipientNotAllowed();\n\n    /**\n     * @dev Revert if the creator payout address is the zero address.\n     */\n    error CreatorPayoutAddressCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error if the received payment is incorrect.\n     */\n    error IncorrectPayment(uint256 got, uint256 want);\n\n    /**\n     * @dev Revert with an error if the allow list proof is invalid.\n     */\n    error InvalidProof();\n\n    /**\n     * @dev Revert if a supplied signer address is the zero address.\n     */\n    error SignerCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error if signer's signature is invalid.\n     */\n    error InvalidSignature(address recoveredSigner);\n\n    /**\n     * @dev Revert with an error if a signer is not included in\n     *      the enumeration when removing.\n     */\n    error SignerNotPresent();\n\n    /**\n     * @dev Revert with an error if a payer is not included in\n     *      the enumeration when removing.\n     */\n    error PayerNotPresent();\n\n    /**\n     * @dev Revert with an error if a payer is already included in mapping\n     *      when adding.\n     *      Note: only applies when adding a single payer, as duplicates in\n     *      enumeration can be removed with updatePayer.\n     */\n    error DuplicatePayer();\n\n    /**\n     * @dev Revert with an error if the payer is not allowed. The minter must\n     *      pay for their own mint.\n     */\n    error PayerNotAllowed();\n\n    /**\n     * @dev Revert if a supplied payer address is the zero address.\n     */\n    error PayerCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error if the sender does not\n     *      match the INonFungibleSeaDropToken interface.\n     */\n    error OnlyINonFungibleSeaDropToken(address sender);\n\n    /**\n     * @dev Revert with an error if the sender of a token gated supplied\n     *      drop stage redeem is not the owner of the token.\n     */\n    error TokenGatedNotTokenOwner(address nftContract, address allowedNftToken, uint256 allowedNftTokenId);\n\n    /**\n     * @dev Revert with an error if the token id has already been used to\n     *      redeem a token gated drop stage.\n     */\n    error TokenGatedTokenIdAlreadyRedeemed(address nftContract, address allowedNftToken, uint256 allowedNftTokenId);\n\n    /**\n     * @dev Revert with an error if an empty TokenGatedDropStage is provided\n     *      for an already-empty TokenGatedDropStage.\n     */\n    error TokenGatedDropStageNotPresent();\n\n    /**\n     * @dev Revert with an error if an allowedNftToken is set to\n     *      the zero address.\n     */\n    error TokenGatedDropAllowedNftTokenCannotBeZeroAddress();\n\n    /**\n     * @dev Revert with an error if an allowedNftToken is set to\n     *      the drop token itself.\n     */\n    error TokenGatedDropAllowedNftTokenCannotBeDropToken();\n\n    /**\n     * @dev Revert with an error if supplied signed mint price is less than\n     *      the minimum specified.\n     */\n    error InvalidSignedMintPrice(uint256 got, uint256 minimum);\n\n    /**\n     * @dev Revert with an error if supplied signed maxTotalMintableByWallet\n     *      is greater than the maximum specified.\n     */\n    error InvalidSignedMaxTotalMintableByWallet(uint256 got, uint256 maximum);\n\n    /**\n     * @dev Revert with an error if supplied signed start time is less than\n     *      the minimum specified.\n     */\n    error InvalidSignedStartTime(uint256 got, uint256 minimum);\n\n    /**\n     * @dev Revert with an error if supplied signed end time is greater than\n     *      the maximum specified.\n     */\n    error InvalidSignedEndTime(uint256 got, uint256 maximum);\n\n    /**\n     * @dev Revert with an error if supplied signed maxTokenSupplyForStage\n     *      is greater than the maximum specified.\n     */\n    error InvalidSignedMaxTokenSupplyForStage(uint256 got, uint256 maximum);\n\n    /**\n     * @dev Revert with an error if supplied signed feeBps is greater than\n     *      the maximum specified, or less than the minimum.\n     */\n    error InvalidSignedFeeBps(uint256 got, uint256 minimumOrMaximum);\n\n    /**\n     * @dev Revert with an error if signed mint did not specify to restrict\n     *      fee recipients.\n     */\n    error SignedMintsMustRestrictFeeRecipients();\n\n    /**\n     * @dev Revert with an error if a signature for a signed mint has already\n     *      been used.\n     */\n    error SignatureAlreadyUsed();\n\n    /**\n     * @dev An event with details of a SeaDrop mint, for analytical purposes.\n     *\n     * @param nftContract    The nft contract.\n     * @param minter         The mint recipient.\n     * @param feeRecipient   The fee recipient.\n     * @param payer          The address who payed for the tx.\n     * @param quantityMinted The number of tokens minted.\n     * @param unitMintPrice  The amount paid for each token.\n     * @param feeBps         The fee out of 10_000 basis points collected.\n     * @param dropStageIndex The drop stage index. Items minted\n     *                       through mintPublic() have\n     *                       dropStageIndex of 0.\n     */\n    event SeaDropMint(\n        address indexed nftContract,\n        address indexed minter,\n        address indexed feeRecipient,\n        address payer,\n        uint256 quantityMinted,\n        uint256 unitMintPrice,\n        uint256 feeBps,\n        uint256 dropStageIndex\n    );\n\n    /**\n     * @dev An event with updated public drop data for an nft contract.\n     */\n    event PublicDropUpdated(address indexed nftContract, PublicDrop publicDrop);\n\n    /**\n     * @dev An event with updated token gated drop stage data\n     *      for an nft contract.\n     */\n    event TokenGatedDropStageUpdated(\n        address indexed nftContract, address indexed allowedNftToken, TokenGatedDropStage dropStage\n    );\n\n    /**\n     * @dev An event with updated allow list data for an nft contract.\n     *\n     * @param nftContract        The nft contract.\n     * @param previousMerkleRoot The previous allow list merkle root.\n     * @param newMerkleRoot      The new allow list merkle root.\n     * @param publicKeyURI       If the allow list is encrypted, the public key\n     *                           URIs that can decrypt the list.\n     *                           Empty if unencrypted.\n     * @param allowListURI       The URI for the allow list.\n     */\n    event AllowListUpdated(\n        address indexed nftContract,\n        bytes32 indexed previousMerkleRoot,\n        bytes32 indexed newMerkleRoot,\n        string[] publicKeyURI,\n        string allowListURI\n    );\n\n    /**\n     * @dev An event with updated drop URI for an nft contract.\n     */\n    event DropURIUpdated(address indexed nftContract, string newDropURI);\n\n    /**\n     * @dev An event with the updated creator payout address for an nft\n     *      contract.\n     */\n    event CreatorPayoutAddressUpdated(address indexed nftContract, address indexed newPayoutAddress);\n\n    /**\n     * @dev An event with the updated allowed fee recipient for an nft\n     *      contract.\n     */\n    event AllowedFeeRecipientUpdated(address indexed nftContract, address indexed feeRecipient, bool indexed allowed);\n\n    /**\n     * @dev An event with the updated validation parameters for server-side\n     *      signers.\n     */\n    event SignedMintValidationParamsUpdated(\n        address indexed nftContract, address indexed signer, SignedMintValidationParams signedMintValidationParams\n    );\n\n    /**\n     * @dev An event with the updated payer for an nft contract.\n     */\n    event PayerUpdated(address indexed nftContract, address indexed payer, bool indexed allowed);\n}\n"},"lib/utility-contracts/src/ConstructorInitializable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * @author emo.eth\n * @notice Abstract smart contract that provides an onlyUninitialized modifier which only allows calling when\n *         from within a constructor of some sort, whether directly instantiating an inherting contract,\n *         or when delegatecalling from a proxy\n */\nabstract contract ConstructorInitializable {\n    error AlreadyInitialized();\n\n    modifier onlyConstructor() {\n        if (address(this).code.length != 0) {\n            revert AlreadyInitialized();\n        }\n        _;\n    }\n}\n"}},"settings":{"remappings":["@prb/test/=lib/prb-test/src/","forge-std/=lib/forge-std/src/","src/=src/","@erc721a/=lib/ERC721A/contracts/","@openzeppelin/=lib/openzeppelin-contracts/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","@solady/=lib/solady/src/","solmate/=lib/solady/lib/solmate/src/","seadrop/=lib/seadrop/","utility-contracts/=lib/utility-contracts/src/","ERC721A-Upgradeable/=lib/seadrop/lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","create2-helpers/=lib/seadrop/lib/create2-helpers/","create2-scripts/=lib/seadrop/lib/create2-helpers/script/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/","murky/=lib/seadrop/lib/murky/src/","openzeppelin-contracts-upgradeable/=lib/seadrop/lib/openzeppelin-contracts-upgradeable/","operator-filter-registry/=lib/operator-filter-registry/","prb-math/=lib/prb-math/src/","prb-test/=lib/prb-test/src/","solady/=lib/solady/src/","solidity-trigonometry/=lib/solidity-trigonometry/src/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":false},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","libraries":{}}}
